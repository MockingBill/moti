var url = require('url'),
    http = require('http'),
    https = require('https'),
    parseXML = require('xml2js').parseString,
    XMLprocessors = require('xml2js/lib/processors');
var fs = require('fs');
var Promise = require('bluebird');
var app_utils = require('../utils/app_utils');

/**
 * The CAS authentication types.
 * @enum {number}
 */
var AUTH_TYPE = {
    BOUNCE: 0,
    BOUNCE_REDIRECT: 1,
    BLOCK: 2
};

/**
 * @typedef {Object} CAS_options
 * @property {string}  cas_url
 * @property {string}  service_url
 * @property {('1.0'|'2.0'|'3.0'|'saml1.1')} [cas_version='3.0']
 * @property {boolean} [renew=false]
 * @property {boolean} [is_dev_mode=false]
 * @property {string}  [dev_mode_user='']
 * @property {Object}  [dev_mode_info={}]
 * @property {string}  [session_name='cas_user']
 * @property {string}  [session_info=false]
 * @property {boolean} [destroy_session=false]
 */

/**
 * @param {CAS_options} options
 * @constructor
 */
function CASAuthentication(options) {

    if (!options || typeof options !== 'object') {
        throw new Error('CAS Authentication was not given a valid configuration object.');
    }

    if (options.cas_server_login_url === undefined) {
        throw new Error('CAS Authentication requires a cas_server_login_url parameter.');
    }
    if (options.cas_server_validate_url === undefined) {
        throw new Error('CAS Authentication requires a cas_server_validate_url parameter.');
    }
    if (options.cas_server_logout_url === undefined) {
        throw new Error('CAS Authentication requires a cas_server_logout_url parameter.');
    }

    this.cas_version = options.cas_version !== undefined ? options.cas_version : '3.0';

    if (this.cas_version === '1.0') {
        this._validateUri = '/validate';
        this._validate = function (body, callback) {
            var lines = body.split('\n');
            if (lines[0] === 'yes' && lines.length >= 2) {
                return callback(null, lines[1]);
            }
            else if (lines[0] === 'no') {
                return callback(new Error('CAS authentication failed.'));
            }
            else {
                return callback(new Error('Response from CAS server was bad.'));
            }
        }
    }
    else if (this.cas_version === '2.0' || this.cas_version === '3.0') {//'/validate' : '/p3/serviceValidate');//
        this._validateUri = (this.cas_version === '2.0' ? '/serviceValidate' : '/p3/serviceValidate');
        this._validate = function (body, callback) {
            console.log('cas_body:', body);
            parseXML(body, {
                trim: true,
                normalize: true,
                explicitArray: false,
                tagNameProcessors: [XMLprocessors.normalize, XMLprocessors.stripPrefix]
            }, function (err, result) {
                if (err) {
                    return callback(new Error('Response from CAS server was bad.'));
                }
                try {
                    var failure = result.serviceresponse.authenticationfailure;
                    if (failure) {
                        return callback(new Error('CAS authentication failed (' + failure.$.code + ').'));
                    }
                    var success = result.serviceresponse.authenticationsuccess;
                    if (success) {
                        return callback(null, success.user, success.attributes);
                    }
                    else {
                        return callback(new Error('CAS authentication failed.'));
                    }
                }
                catch (err) {
                    console.log(err);
                    return callback(new Error('CAS authentication failed.'));
                }
            });
        }
    }
    else if (this.cas_version === 'saml1.1') {
        this._validateUri = '/samlValidate';
        this._validate = function (body, callback) {
            parseXML(body, {
                trim: true,
                normalize: true,
                explicitArray: false,
                tagNameProcessors: [XMLprocessors.normalize, XMLprocessors.stripPrefix]
            }, function (err, result) {
                if (err) {
                    return callback(new Error('Response from CAS server was bad.'));
                }
                try {
                    var samlResponse = result.envelope.body.response;
                    var success = samlResponse.status.statuscode.$.Value.split(':')[1];
                    if (success !== 'Success') {
                        return callback(new Error('CAS authentication failed (' + success + ').'));
                    }
                    else {
                        var attributes = {};
                        var attributesArray = samlResponse.assertion.attributestatement.attribute;
                        if (!(attributesArray instanceof Array)) {
                            attributesArray = [attributesArray];
                        }
                        attributesArray.forEach(function (attr) {
                            var thisAttrValue;
                            if (attr.attributevalue instanceof Array) {
                                thisAttrValue = [];
                                attr.attributevalue.forEach(function (v) {
                                    thisAttrValue.push(v._);
                                });
                            }
                            else {
                                thisAttrValue = attr.attributevalue._;
                            }
                            attributes[attr.$.AttributeName] = thisAttrValue;
                        });
                        return callback(null, samlResponse.assertion.authenticationstatement.subject.nameidentifier, attributes);
                    }
                }
                catch (err) {
                    console.log(err);
                    return callback(new Error('CAS authentication failed.'));
                }
            });
        }
    }
    else {
        throw new Error('The supplied CAS version ("' + this.cas_version + '") is not supported.');
    }

    /*this.cas_url = options.cas_url;
    this.cas_lan_url = options.cas_lan_url ? options.cas_lan_url : options.cas_url;*/

    this.cas_server_login_url = options.cas_server_login_url;
    this.cas_server_validate_url = options.cas_server_validate_url;
    this.cas_server_logout_url = options.cas_server_logout_url;

    var parsed_cas_url = url.parse(this.cas_server_login_url);
    console.log('parsed_cas_url.protocol:'+parsed_cas_url.protocol );
    this.request_client = parsed_cas_url.protocol === 'http:' ? http : https;
    this.cas_host = parsed_cas_url.hostname;
    console.log("parsed_cas_url.port:" + parsed_cas_url.port + "(" + (!parsed_cas_url.port) + ")");
    this.cas_port = !parsed_cas_url.port ? (parsed_cas_url.protocol === 'http:' ? 80 : 443) : parsed_cas_url.port;// 修改端口号
    this.cas_path = parsed_cas_url.pathname;

    var parsed_cas_lan_url = url.parse(this.cas_server_validate_url);
    this.cas_lan_host = parsed_cas_lan_url.hostname;
    this.cas_lan_port = !parsed_cas_lan_url.port ? (parsed_cas_lan_url.protocol === 'http:' ? 80 : 443) : parsed_cas_lan_url.port;// 修改端口号
    this.cas_lan_path = parsed_cas_lan_url.pathname;

    this.service_url = options.service_url;

    this.renew = options.renew !== undefined ? !!options.renew : false;

    this.is_dev_mode = options.is_dev_mode !== undefined ? !!options.is_dev_mode : false;
    this.dev_mode_user = options.dev_mode_user !== undefined ? options.dev_mode_user : '';
    this.dev_mode_info = options.dev_mode_info !== undefined ? options.dev_mode_info : {};

    this.session_name = options.session_name !== undefined ? options.session_name : 'cas_user';
    this.session_info = ['2.0', '3.0', 'saml1.1'].indexOf(this.cas_version) >= 0 && options.session_info !== undefined ? options.session_info : false;
    this.destroy_session = options.destroy_session !== undefined ? !!options.destroy_session : false;

    // Bind the prototype routing methods to this instance of CASAuthentication.
    this.bounce = this.bounce.bind(this);
    this.bounce_redirect = this.bounce_redirect.bind(this);
    this.block = this.block.bind(this);
    this.logout = this.logout.bind(this);
}

/**
 * Bounces a request with CAS authentication. If the user's session is not
 * already validated with CAS, their request will be redirected to the CAS
 * login page.
 */
CASAuthentication.prototype.bounce = function (req, res, next) {

    // Handle the request with the bounce authorization type.
    this._handle(req, res, next, AUTH_TYPE.BOUNCE);
};

/**
 * Bounces a request with CAS authentication. If the user's session is not
 * already validated with CAS, their request will be redirected to the CAS
 * login page.
 */
CASAuthentication.prototype.bounce_redirect = function (req, res, next) {

    // Handle the request with the bounce authorization type.
    this._handle(req, res, next, AUTH_TYPE.BOUNCE_REDIRECT);
};

/**
 * Blocks a request with CAS authentication. If the user's session is not
 * already validated with CAS, they will receive a 401 response.
 */
CASAuthentication.prototype.block = function (req, res, next) {

    // Handle the request with the block authorization type.
    this._handle(req, res, next, AUTH_TYPE.BLOCK);
};

var config = require('../../../config');
var utils = require('../utils/app_utils');
/**
 * Handle a request with CAS authentication.
 */
CASAuthentication.prototype._handle = function (req, res, next, authType) {

    // 检查是否需要登录之后才能访问
    if (/(^\/(static))|((.ico)$)/.test(req.url)) {
        next();
        return;
    }
    //console.log("auth_check:"+req.method + '|' + req.url);
    var exclude_auth_check_urls = config.routes.exclude_auth_check_urls;
    // 循环url
    var flag = false;
    exclude_auth_check_urls.forEach(function (item) {
        // 检查规则里面是否存在通配符
        if (item.indexOf('*') == -1) {//console.log(eval('/^'+item+'/'));
            flag = flag || new RegExp("^" + item).test(req.url);
        }
        else {
            flag = flag || utils.wildcard(item, req.url);
        }
    });

    // 在排除列表中
    if (flag) {
        next();
    }
    else {

        // If the session has been validated with CAS, no action is required.
        if (req.session[this.session_name]) {
            // If this is a bounce redirect, redirect the authenticated user.
            if (authType === AUTH_TYPE.BOUNCE_REDIRECT) {
                res.redirect(req.session.cas_return_to);
            }
            // Otherwise, allow them through to their request.
            else {
                next();
            }
        }
        // If dev mode is active, set the CAS user to the specified dev user.
        else if (this.is_dev_mode) {
            req.session[this.session_name] = this.dev_mode_user;
            req.session[this.session_info] = this.dev_mode_info;
            next();
        }
        // If the authentication type is BLOCK, simply send a 401 response.
        else if (authType === AUTH_TYPE.BLOCK) {
            //res.sendStatus(401);
            res.status(401);
            res.render('common/error', {
                message: '未授权'
            });
        }
        // If there is a CAS ticket in the query string, validate it with the CAS server.
        else if (req.query && req.query.ticket) {
            this._handleTicket(req, res, next);
        }
        // Otherwise, redirect the user to the CAS login.
        else {
            this._login(req, res, next);
        }
    }
};

/**
 * Redirects the client to the CAS login.
 */
CASAuthentication.prototype._login = function (req, res, next) {

    // Save the return URL in the session. If an explicit return URL is set as a
    // query parameter, use that. Otherwise, just use the URL from the request.
    //console.log('_login:'+req.query.returnTo + '|' + url.parse(req.url).path);
    req.session.cas_return_to = req.query.returnTo || url.parse(req.url).path;
    //console.log('req.session.cas_return_to:'+req.session.cas_return_to);
    // Set up the query parameters.
    var query = {
        service: this.service_url + url.parse(req.url).pathname,
        renew: this.renew
    };

    // Redirect to the CAS login.
    res.redirect(this.cas_server_login_url + url.format({
            //pathname: '/login',
            query: query
        }));
};

/**
 * Logout the currently logged in CAS user.
 */
CASAuthentication.prototype.logout = function (req, res, next) {

    // Destroy the entire session if the option is set.
    if (this.destroy_session) {
        req.session.destroy(function (err) {
            if (err) {
                console.log(err);
            }
        });
    }
    // Otherwise, just destroy the CAS session variables.
    else {
        delete req.session[this.session_name];
        if (this.session_info) {
            delete req.session[this.session_info];
        }
    }

    // Redirect the client to the CAS logout.
    res.redirect(this.cas_server_logout_url);
};

/**
 * Handles the ticket generated by the CAS login requester and validates it with the CAS login acceptor.
 */
CASAuthentication.prototype._handleTicket = function (req, res, next) {

    /*var requestOptions = {
        host: this.cas_host,
        port: this.cas_port,
        key:fs.readFileSync('keys/yfyidmp.pem'),
        cert:fs.readFileSync('keys/server.crt'),*
        /*ca: [fs.readFileSync('../../../../keys/ca-cert.pem')],*/
    /*    agent:false,
        rejectUnauthorized: false
    };*/
    var requestOptions = {
        host: this.cas_lan_host,
        port: this.cas_lan_port
    };
    console.log('_handleTicket:' + this.service_url + ',' + url.parse(req.url).pathname);
    console.log('requestOptions:' + JSON.stringify(requestOptions));
    if (['1.0', '2.0', '3.0'].indexOf(this.cas_version) >= 0) {
        //requestOptions.method = 'GET';
        requestOptions.path = url.format({
            //pathname: this.cas_lan_url + this._validateUri,
            pathname: this.cas_lan_path,
            query: {
                service: this.service_url + url.parse(req.url).pathname,
                ticket: req.query.ticket
            }
        });
    }
    else if (this.cas_version === 'saml1.1') {
        var now = new Date();
        var post_data = '<?xml version="1.0" encoding="utf-8"?>\n' +
            '<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">\n' +
            '  <SOAP-ENV:Header/>\n' +
            '  <SOAP-ENV:Body>\n' +
            '    <samlp:Request xmlns:samlp="urn:oasis:names:tc:SAML:1.0:protocol" MajorVersion="1"\n' +
            '      MinorVersion="1" RequestID="_' + req.host + '.' + now.getTime() + '"\n' +
            '      IssueInstant="' + now.toISOString() + '">\n' +
            '      <samlp:AssertionArtifact>\n' +
            '        ' + req.query.ticket + '\n' +
            '      </samlp:AssertionArtifact>\n' +
            '    </samlp:Request>\n' +
            '  </SOAP-ENV:Body>\n' +
            '</SOAP-ENV:Envelope>';

        requestOptions.method = 'POST';
        requestOptions.path = url.format({
            pathname: this.cas_lan_path,
            query: {
                TARGET: this.service_url + url.parse(req.url).pathname,
                ticket: ''
            }
        });
        requestOptions.headers = {
            'Content-Type': 'text/xml',
            'Content-Length': Buffer.byteLength(post_data)
        };
    }
    console.log('requestOptions2:' + JSON.stringify(requestOptions));
    var request = this.request_client.request(requestOptions, function (response) {
        response.setEncoding('utf8');
        var body = '';
        response.on('data', function (chunk) {
            return body += chunk;
        }.bind(this));
        response.on('end', function () {
            this._validate(body, function (err, user, attributes) {
                if (err) {
                    console.log(err);
                    //res.sendStatus(401);
                    res.status(401);
                    res.render('common/error', {
                        message: '令牌已失效'
                    });
                }
                else {console.log(user);
                    req.session[this.session_name] = user;
                    if (this.session_info) {
                        req.session[this.session_info] = attributes || {};
                    }

                    // 此处用来做系统本地二次登录
                    this._localLogin(req, res, this.session_name)
                        .then(function(key){
                            console.log('cas_return_to:', config.auth.cas_client_service_url + config.project.base + '/');
                            res.end("<script>location='" + config.auth.cas_client_service_url + config.project.base + '/' + "'</script>");
                        })
                        .catch(function(error){
                            res.status(500);
                            res.render('error/error', {
                                message: error.message
                            });
                        });

                    /*this._localLogin(req, res, this.session_name, function (key) {
                        console.log('cas_return_to:' + req.session.cas_return_to);
                        //res.redirect(req.session.cas_return_to);
                        var url = ((req.session.cas_return_to == config.project.appurl + '/' || req.session.cas_return_to == config.project.appurl + '/login') ? req.session[key].user_sys.sys_main_url : req.session.cas_return_to);
                        console.log('url:', url);
                        res.end("<script>location='" + url + "'</script>");
                    });*/

                    //console.log('cas_return_to:'+req.session.cas_return_to);
                    //res.redirect(req.session.cas_return_to);
                }
            }.bind(this));
        }.bind(this));
        response.on('error', function (err) {
            console.log('Response error from CAS: ', err);
            //res.sendStatus(401);
            res.status(401);
            res.render('common/error', {
                message: '和CAS通信失败'
            });
        }.bind(this));
    }.bind(this));

    request.on('error', function (err) {
        console.log('Request error with CAS: ', err);
        //res.sendStatus(401);
        res.status(401);
        res.render('common/error', {
            message: '和CAS通信失败'
        });
    }.bind(this));

    if (this.cas_version === 'saml1.1') {
        request.write(post_data);
    }
    request.end();
};
var index_service = require('../../web/services/index_service');
CASAuthentication.prototype._localLogin = function (req, res, key) {

    return new Promise(async function (resolve, reject) {
        try {

            var cas_user = req.session[key];
            if (cas_user) {
                var login_account = JSON.parse(cas_user).login_account;
                console.log('cas_login_account:' + login_account);

                // 根据登陆账号查询用户信息
                var result = await index_service.queryUserByAccountOrPhone(login_account);
                if (result.length > 0) {
                    var user_info = result[0];

                    // 检查账号是否被冻结
                    if (user_info['user_status'] == 1) {
                        // 加载用户其他信息及权限信息
                        var current_sys = user_info['user_sys'];
                        // 保存当前用户
                        req.session.current_user = user_info;

                        var current_user_id = user_info.user_id;

                        // 加载一级导航
                        let sys_nav = await index_service.querySysNav(current_sys, current_user_id);
                        req.session.current_sys_nav = sys_nav;

                        // 保存当前用户拥有的权限
                        let user_auths = await index_service.getUserRoleMenus(current_user_id);
                        req.session.current_user_auths = app_utils.array2map(user_auths, 'menu_url', 'id');

                        req.session.save(function (err) {
                            if(err) {
                                reject(app_utils.returnError('保存用户会话信息出现异常' + e.message, 5004));
                            }
                            else {
                                resolve('current_user');
                            }
                        });
                    }
                    else {
                        reject(app_utils.returnError('登陆账号[' + login_account + ']已被冻结', 5003));
                    }
                }
                else {
                    reject(app_utils.returnError('登陆账号[' + login_account + ']在系统中不存在', 5002));
                }
            }
            else {
                reject(app_utils.returnError('未获取到单点登陆用户信息', 5001));
            }
        }
        catch(e){
            reject(app_utils.returnError('本地登陆时出现异常，因为：' + e.message, 5000));
        }
    });

}

module.exports = CASAuthentication;
