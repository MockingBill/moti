'use strict'

var uuid = require("uuid");
var os = require('os');
var mysql = require('promise-mysql');
var config = require('../../../config');

var getIPAdress = function () {
    var interfaces = require('os').networkInterfaces();
    for (var devName in interfaces) {
        var iface = interfaces[devName];
        for (var i = 0; i < iface.length; i++) {
            var alias = iface[i];
            if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
                return alias.address;
            }
        }
    }
}

/**
 * 全局属性
 */
global.__CM_SERVER_DOCKER_TAGS = process.env.cm_tags ? process.env.cm_tags : "";
global.__CM_SERVER_TAGS = ['base']; //config.tags ? config.tags : [];
global.__CM_VERSION = "1.0";
global.__CM_GROUP = "dev" //config.group ? config.group : 'dev';
global.__CM_APP = "app"; //config.app ? config.app : 'app';
global.__CM_CATALOG = "product" //config.catalog ? config.catalog : 'product';

global.__CM_SERVER_INST_ID = uuid.v4();
global.__CM_SERVER_IP = getIPAdress();
global.__CM_SERVER_PID = process.pid;
global.__CM_SERVER_PMID = process.env.pm_id ? process.env.pm_id : -1;
global.__CM_OS_HOSTNAME = os.hostname();
global.__CM_OS_RELEASE = os.release();
global.__CM_OS_TYPE = os.type();
global.__CM_OS_PLATFORM = os.platform();
global.__CM_OS_ARCH = os.arch();
global.__CM_OS_CPUS = JSON.stringify(os.cpus());
global.__CM_OS_NI = JSON.stringify(os.networkInterfaces());
global.__CM_OS_ENDIANNESS = os.endianness();
global.__CM_OS_TOTALMEM = os.totalmem();

/**
 * APM Table
 */
//进程实例信息表
const _APM_TABLE_SERVER_INST = "common_apm_server_inst";
//Web性能表
const _APM_TABLE_SERVER_APM =  "common_apm_web";
//Web访问日志表
const _APM_TABLE_ACCESS_LOG =  "common_apm_web_access_log";
//日志记录表
const _APM_TABLE_APP_LOG =  "common_apm_app_log";


/**
 * 策略参数配置
 */
//队列大于多少条后触发批量保存记
const _APM_LOG_BATCH_SIZE=1000;
//APM 指标采集的分片间隔（s）
const _APM_SERVER_DATA_TIMER = 3;
//http request 超时时间(ms)， 默认 5分钟
const _HTTP_REQ_MAX_TIMEOUT = 5*60*1000;

/**
 * APM性能采集指标定义
 */
var stat = {
    //http 请求统计指标
    request_count: 0,
    response_count: 0,

    //响应时间
    response_time_max: 0,
    response_time_min: 0,
    response_time_avg: 0,

    //http处理消耗CPU时间
    response_duration: 0,

    //不同http 返回状态码的响应数
    statusCode_1xx: 0,
    statusCode_2xx: 0,
    statusCode_3xx: 0,
    statusCode_4xx: 0,
    statusCode_5xx: 0
}

function APM(opt) {

    if (!opt) opt = {};

    this._type = opt.type ? opt.type : "mysql";

    var _connection = opt.connection ? opt.connection : "default";

    this._enabled = true;
    if (opt.enabled === false) {
        this._enabled = false;
    }

    //队列:access_log
    this._apm_access_logs = [];
    //队列:apm性能数据
    this._apm_data = [];
    //队列:app_log
    this._apm_app_logs = [];

    var pool = mysql.createPool(config['mysql'][_connection]);
    
    var $this = this;

    /**
     * 日志保留时间
     */
    //性能日志保留多少时间(天)
    this._retain_apm_day = opt._retain_apm_day ? opt._retain_apm_day : 32;
    //Access日志保留多少时间(天)
    this._retain_accesslog_day = opt._retain_accesslog_day ? opt._retain_accesslog_day : 15;
    //应用日志保留多少时间(天)
    this._retain_applog_day = opt._retain_applog_day ? opt._retain_applog_day : 15;

    //APM 指标采集的分片间隔（ms）
    this._apm_interval = _APM_SERVER_DATA_TIMER ? _APM_SERVER_DATA_TIMER:3  ;
    

    /**
     * 日志保存策略
     */
    //批量保存记录大小
    this._apm_accesslog_bulk_size =  500;
    //批量保存记录大小
    this._apm_data_bulk_size =  500;
    //批量保存记录大小
    this._apm_applog_bulk_size =  500;

    /**
     * 队列最大长度
     */
    //AccessLog 最大队列长度
    this._apm_accesslog_max_length = 10000;
    //APM data 最大队列长度
    this._apm_data_max_length = 2000;
    //Applog 最大队列长度
    this._apm_applog_max_length = 10000;
    
    //自动保存时间间隔（ms）
    this._autosave_timeout = opt.autosave_timeout ? opt.autosave_timeout : 500;

    //更新服务状态间隔(s)
    this._autofresh_inst_timeout = opt.autofresh_inst_timeout ? opt.autofresh_inst_timeout : 10;

    //自动清理过期日志数据的时间间隔(s)
    this._autodelete_log_timeout = opt.autodelete_log_timeout ? opt.autodelete_log_timeout : 1800;

    this.factory = function (opt) {

        return new APM(opt);
    }
    this.addLog = function(msg){

        if(!msg){
            return;
        }
        msg._id = uuid.v4();
        msg.insert_time = new Date();
        msg.tags = 'tags';
        msg.level = 'info';
        msg.msg= 'hello';
        msg.app_typeid = 'typeid';
        msg.app_bizid= 'bizid';
        msg.app_issueid= 'issueid';
        msg.app_author= 'author';
        
        if(this._apm_app_logs.length<this._apm_applog_max_length){
            this._apm_app_logs.push(msg)
        }

        if(this._apm_app_logs.length<this._apm_applog_bulk_size){

            this._saveLogBatch();
        }

    }
    /**
     * Web APM中间件
     * 
     * @param {*} req 
     * @param {*} res 
     * @param {*} next 
     */
    this.web = function (req, res, next) {

        stat.request_count++;

        var ct = new Date().getTime();
        var usr = "anoymous";
        //var tags = res.get('apptag') ;

        var sessionid = "";

        if (req.session && req.session.current_user) {

            usr = req.session.current_user['login_account'];
        }
        if (req.session && req.session.current_user) {

            sessionid = req.session.current_user['user_id'];
        }

        var msg = {
            "_id": uuid.v4(),
            "src": "web",
            "sessionid": sessionid,
            "remoteip": req.headers['x-forwarded-for'] || req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket.remoteAddress,
            "insert_time": new Date(),
            "type": 'webapm',
            "loginaccount": usr,
            "method": req.method,
            "duration": 0,
            "statusCode": res.statusCode,
            "url": req.baseUrl + req.path,
            // "params": "not log",
            "params": JSON.stringify({
                req_url: req.originalUrl,
                req_query: req.query,
                req_param: req.params,
                req_body: req.body
            }),
            "size": -1
        };
        let _self = $this;

        var apmtimer = setTimeout(function () {

            stat.response_count++;

            var duration = new Date().getTime() - ct;
            stat.response_duration = stat.response_duration + duration;

            msg.type = "timeout";
            msg.contenttype = res.getHeader('content-type');
            msg.statusCode = res.statusCode;
            msg.duration = duration;
            msg.finished = res.finished;
            msg.app_typeid = res.get('app_typeid');
            msg.app_bizid = res.get('app_bizid');
            msg.app_issueid = res.get('app_issueid');
            msg.app_author = res.get('app_author');

            msg.app_success = res.get('app_success');
            msg.app_statuscode = res.get('app_statuscode');
            msg.app_tags = res.get('app_tags');
            msg.dev_debug = res.get('dev_debug');
            msg.btiming = res.get('BTiming') ? res.get('BTiming') : '';

            if (duration > stat.response_time_max) stat.response_time_max = duration;
            if (duration < stat.response_time_min || stat.response_time_min == -1) stat.response_time_min = duration;

            if (res.statusCode >= 200 && res.statusCode < 300) {
                stat.statusCode_2xx++;
            } else if (res.statusCode >= 300 && res.statusCode < 400) {
                stat.statusCode_3xx++;
            } else if (res.statusCode >= 400 && res.statusCode < 500) {
                stat.statusCode_4xx++;

            } else if (res.statusCode >= 500 && res.statusCode < 600) {
                stat.statusCode_5xx++;
            } else {
                stat.statusCode_1xx++;
            }
            _self._addWebAccessLog(msg);

        }, _HTTP_REQ_MAX_TIMEOUT);

        res.on('finish', function () {

            clearTimeout(apmtimer);

            stat.response_count++;

            var duration = new Date().getTime() - ct;


            stat.response_duration = stat.response_duration + duration;

            msg.type = "finish";
            msg.contenttype = res.getHeader('content-type');
            msg.statusCode = res.statusCode;
            msg.duration = duration;
            msg.finished = res.finished;
            msg.app_typeid = res.get('app_typeid');
            msg.app_bizid = res.get('app_bizid');
            msg.app_issueid = res.get('app_issueid');
            msg.app_author = res.get('app_author');

            msg.app_success = res.get('app_success');
            msg.app_statuscode = res.get('app_statuscode');
            msg.app_tags = res.get('app_tags');
            msg.dev_debug = res.get('dev_debug');
            msg.btiming = res.get('BTiming') ? res.get('BTiming') : '';

            if (duration > stat.response_time_max) stat.response_time_max = duration;
            if (duration < stat.response_time_min || stat.response_time_min == -1) stat.response_time_min = duration;

            if (res.statusCode >= 200 && res.statusCode < 300) {
                stat.statusCode_2xx++;
            } else if (res.statusCode >= 300 && res.statusCode < 400) {
                stat.statusCode_3xx++;
            } else if (res.statusCode >= 400 && res.statusCode < 500) {
                stat.statusCode_4xx++;

            } else if (res.statusCode >= 500 && res.statusCode < 600) {
                stat.statusCode_5xx++;
            } else {
                stat.statusCode_1xx++;
            }

            _self._addWebAccessLog(msg);

        })

        res.on('error', function () {


            clearTimeout(apmtimer);

            var duration = new Date().getTime() - ct;


            msg.type = "error";
            msg.contenttype = res.getHeader('content-type');
            msg.statusCode = res.statusCode;
            msg.duration = duration;
            msg.finished = res.finished;
            msg.app_typeid = res.get('app_typeid');
            msg.app_bizid = res.get('app_bizid');
            msg.app_issueid = res.get('app_issueid');
            msg.app_author = res.get('app_author');
            msg.app_success = res.get('app_success');
            msg.app_statuscode = res.get('app_statuscode');
            msg.app_tags = res.get('app_tags');
            msg.dev_debug = res.get('dev_debug');
            msg.btiming = res.get('BTiming') ? res.get('BTiming') : '';

            stat.response_count++;


            stat.response_duration = stat.response_duration + duration;


            msg.duration = duration;
            msg.statusCode = res.statusCode;

            if (duration > stat.response_time_max) stat.response_time_max = duration;
            if (duration < stat.response_time_min || stat.response_time_min == -1) stat.response_time_min = duration;

            if (res.statusCode >= 200 && res.statusCode < 300) {
                stat.statusCode_2xx++;
            } else if (res.statusCode >= 300 && res.statusCode < 400) {
                stat.statusCode_3xx++;
            } else if (res.statusCode >= 400 && res.statusCode < 500) {
                stat.statusCode_4xx++;

            } else if (res.statusCode >= 500 && res.statusCode < 600) {
                stat.statusCode_5xx++;
            } else {
                stat.statusCode_1xx++;
            }

            _self._addWebAccessLog(msg);

        })

        next();

    }
    /**
     * 添加Web Access Log
     * @param {*} msg 
     */
    this._addWebAccessLog = function (msg) {

        if(this._apm_access_logs.length > this._apm_accesslog_max_length){
            return;
        }

        if (msg.statusCode >= 400 && msg.statusCode < 500) {
            this._apm_access_logs.push(msg);

        } else if (msg.statusCode >= 500 && msg.statusCode < 600) {
            this._apm_access_logs.push(msg);
        } 
        // 不记录所有静态文件和ico
        else if (/(^\/(static))|(.*?(ico|jpg|gif|png|bmp|js|css)$)/.test(msg.url)) {
            return;
        }
        else{
            this._apm_access_logs.push(msg);
        }
        if (this._apm_access_logs.length > this._apm_accesslog_bulk_size) {
            
            this._saveAccessLogBatch();
            
        }
    }
    this._saveAPMBatch = function () {

        this._saveAPMBatchToMysql();


    }
    this._saveAccessLogBatch = function () {

        this._saveAccessLogBatchToMysql();


    }
    this._saveLogBatch = function () {

        this._saveLogBatchToMysql();

    }
    this._saveLogBatchToMysql = function () {

        
        if (this._apm_app_logs.length < 1) {

            return;
        }

        var map = [];

        var log = this._apm_app_logs.pop();
        var i = 0;

        while (log) {

            i++;

            map.push([__CM_SERVER_INST_ID, __CM_GROUP, __CM_APP, __CM_SERVER_PMID, __CM_SERVER_PID, log._id,log.insert_time,log.app_typeid,log.app_bizid,log.app_issueid,log.app_author,log.level,log.tags,log.msg]);

            if (i > this._apm_applog_bulk_size)
                break;

            log = this._apm_app_logs.pop();
        }
        if (map.length > 0) {

            var sql = "INSERT INTO " + _APM_TABLE_APP_LOG + " (`instid`,`group`,`app`,`pmid`,`pid`,`_id`,`insert_time`,`app_typeid`,`app_bizid`,`app_issueid`,`app_author`,`level`,`tags`,`msg`) VALUES ?";

            pool.query(sql, [map], function (err, rows, fields) {
                if (err) {
                    console.log('save to mysql error['+_APM_TABLE_APP_LOG+']'+err);
                    return;
                }

            });


        }

    }
    this._saveAccessLogBatchToMysql = function () {

        if (this._apm_access_logs.length < 1) {
            return;
        }

        var map = [];

        var log = this._apm_access_logs.pop();
        var i = 0;

        while (log && log._id) {

            i++;

            map.push([__CM_SERVER_INST_ID, __CM_GROUP, __CM_APP, __CM_SERVER_PMID, __CM_SERVER_PID, log._id, log.sessionid, log.remoteip, log.loginaccount, log.insert_time, log.type, log.url, log.tags, log.src, log.method, log.duration, log.statusCode, log.finished, log.size, log.params, JSON.stringify(log.header), log.contenttype, log.app_typeid, log.app_bizid, log.app_issueid, log.app_author, log.app_success, log.app_statuscode, log.app_tags, log.dev_debug, log.btiming]);

            if (i > this._apm_accesslog_bulk_size)
                break;

            log = this._apm_access_logs.pop();
        }
        if (map.length > 0) {

            var sql = "INSERT INTO " + _APM_TABLE_ACCESS_LOG + " (`instid`,`group`,`app`,`pmid`,`pid`,`_id`,`sessionid`,`remoteip`,`loginaccount`,`insert_time`,`type`,`url`,`tags`,`src`,`method`,`duration`,`statusCode`,`finished`,`size`,`params`,`header`,`contenttype`,`app_typeid`,`app_bizid`,`app_issueid`,`app_author`,`app_success`,`app_code`,`app_tags`,`dev_debug`,`btiming` ) VALUES ?";

            pool.query(sql, [map], function (err, rows, fields) {
                if (err) {
                    console.log('save to mysql error['+_APM_TABLE_ACCESS_LOG+']'+err);
                    return;
                }

            });


        }


    }
    this._saveAPMBatchToMysql = function () {

        if (this._apm_data.length < 1) {

            return;
        }

        var map = [];

        var log = this._apm_data.pop();
        var i = 0;
        while (log) {

            i++;

            map.push([__CM_SERVER_INST_ID, __CM_GROUP, __CM_APP, __CM_SERVER_PMID, __CM_SERVER_PID, log.insert_time, log.os_mem_total, log.os_mem_free, log.p_cpu_1m_avg, log.p_mem_rss, log.p_mem_heap_total, log.p_mem_heap_used, log.req_count, log.resp_count, log.resp_time_avg, log.resp_duration, log.resp_time_max, log.resp_time_min, log.resp_code_1xx, log.resp_code_2xx, log.resp_code_3xx, log.resp_code_4xx, log.resp_code_5xx]);

            if (i > this._apm_data_bulk_size)
                break;

            log = this._apm_data.pop();
        }

        if (map.length > 0) {

            var sql = "INSERT INTO " + _APM_TABLE_SERVER_APM + "(`instid`,`group`,`app`,`pmid`,`pid`,`insert_time`,`os_mem_total`,`os_mem_free`,`p_cpu_1m_avg`,`p_mem_rss`,`p_mem_heap_total`,`p_mem_heap_used`,`req_count`,`resp_count`,`resp_time_avg`,`resp_duration`,`resp_time_max`,`resp_time_min`,`resp_code_1xx`,`resp_code_2xx`,`resp_code_3xx`,`resp_code_4xx`,`resp_code_5xx`) VALUES ?";
            pool.query(sql, [map], function (err, rows, fields) {
                if (err) {

                    console.error('save to mysql error['+_APM_TABLE_SERVER_APM+'],'+ err);
                     
                }

            });

        }

    }

    this.addInstInfoToMysql= function (serverProfile) {

        //有效的时间（默认 30 sec 的偏移量)
        let ttl_windows = 1000 * this._autofresh_inst_timeout * 3  ;
        let ttl_now = new Date();
        ttl_now.setMilliseconds(ttl_now.getMilliseconds() + ttl_windows);

        
        var map  = [];
        var __CM_APP_VERSION = "1";
        var __CM_APP_GIT_TAG = "1";
        map.push([__CM_SERVER_INST_ID,1,JSON.stringify(serverProfile),__CM_GROUP,__CM_APP,__CM_OS_TYPE,__CM_OS_PLATFORM,__CM_OS_ARCH,__CM_OS_CPUS,__CM_OS_NI,__CM_OS_ENDIANNESS,__CM_CATALOG,__CM_VERSION,__CM_APP_VERSION,__CM_APP_GIT_TAG,JSON.stringify(process.env),__CM_SERVER_IP,__CM_SERVER_PID,__CM_SERVER_PMID,new Date(),ttl_now,__CM_SERVER_TAGS,__CM_SERVER_DOCKER_TAGS,__CM_OS_HOSTNAME,__CM_OS_RELEASE,__CM_OS_TOTALMEM,(""+new Date()) ] );
        var sql = "INSERT INTO "+_APM_TABLE_SERVER_INST+" (`instid`,`status`,`instprofile`,`group`,`app`,`ostype`,`osplatform`,`osarch`,`oscpus`,`osnis`,`osendianness`,`appname`,`coreversion`,`appversion`,`gittag`,`serverenv`,`serverip`,`pid`,`pmid`,`insert_time`,`update_time`,`tags`,`docer_tags`,`hostname`,`osrelease`,`osmem`,`getdate`) VALUES ?";
        
        pool.query(sql, [map], function (err, rows, fields) {
            if(err){
                console.error('save to mysql error['+_APM_TABLE_SERVER_INST+'],'+ err);
                return;
            }

        });


    }
    this._updateInstStatusToMysql = function () {

 
        
        //有效的时间（默认 30 sec 的偏移量)
        let ttl_windows = 1000 * 30  ;
        let ttl_now = new Date();
        ttl_now.setMilliseconds(ttl_now.getMilliseconds() + ttl_windows);

        var map = [];
        map.push([ttl_now]);
        

        
        var sql = "update  " + _APM_TABLE_SERVER_INST + " set status=1 ,update_time=?  where  instid =  '" + __CM_SERVER_INST_ID + "'";

        pool.query(sql, [map], function (err, rows, fields) {
            if (err) {

                console.error('save to mysql error['+_APM_TABLE_SERVER_INST+'],'+ err);

            }

        });

        sql = "update  " + _APM_TABLE_SERVER_INST + " set status=2   where status=1 and update_time <  now() ";
        
        pool.query(sql ,  function (err, rows, fields) {
            if(err){
                console.error('save to mysql error['+_APM_TABLE_SERVER_APM+'],'+ err);

            }
            
        });


    }
    this._clearLogFromMysql = function() {

        
        var sql =  "delete  from  "+_APM_TABLE_SERVER_APM+"  where  insert_time < DATE_SUB(sysdate(),INTERVAL "+ this._retain_apm_day+ " DAY) " ;

        pool.query(sql ,  function (err, rows, fields) {
            if(err){
                console.error('save to mysql error['+_APM_TABLE_SERVER_APM+'],'+ err);

            }

        });


        sql =  "delete  from  "+_APM_TABLE_ACCESS_LOG+"  where  insert_time < DATE_SUB(sysdate(),INTERVAL "+ this._retain_accesslog_day+ " DAY) " ;
        pool.query(sql ,  function (err, rows, fields) {
            if(err){
                console.error('save to mysql error['+_APM_TABLE_ACCESS_LOG+'],'+ err);

            }

        });


    
    
    }

    //APM
    var timer1 = setInterval(function () {

        var osloadavg = os.loadavg();
        var mem = process.memoryUsage();

        //var stat = $this._apm_stat ;
        if (stat.response_count > 0) {
            stat.response_time_avg = stat.response_duration / stat.response_count;

        }
        var point = {

            //time 必填
            insert_time: new Date(),

            os_mem_total: os.totalmem(),
            os_mem_free: os.freemem(),
            p_cpu_1m_avg: osloadavg[0],
            p_mem_rss: mem.rss,
            p_mem_heap_total: mem.heapTotal,
            p_mem_heap_used: mem.heapUsed,

            req_count: stat.request_count,
            req_per_sec: (stat.request_count / $this._apm_interval),
            resp_count: stat.response_count,
            resp_time_avg: stat.response_time_avg,
            resp_duration: stat.response_duration,
            resp_time_max: stat.response_time_max,
            resp_time_min: stat.response_time_min,

            resp_code_1xx: stat.statusCode_1xx,
            resp_code_2xx: stat.statusCode_2xx,
            resp_code_3xx: stat.statusCode_3xx,
            resp_code_4xx: stat.statusCode_4xx,
            resp_code_5xx: stat.statusCode_5xx

        };

        //reset
        stat.request_count = 0;
        stat.response_count = 0;
        stat.response_duration = 0;
        stat.response_time_max = 0;
        stat.response_time_min = 0;
        stat.response_time_avg = 0;

        stat.statusCode_1xx = 0;
        stat.statusCode_2xx = 0;
        stat.statusCode_3xx = 0;
        stat.statusCode_4xx = 0;
        stat.statusCode_5xx = 0;

        if($this._apm_data.length<$this._apm_data_max_length)
            $this._apm_data.push(point);


    }, $this._apm_interval * 1000);

    this.addInstInfoToMysql();

    //Write DB
    setInterval(function () {

        $this._saveAPMBatch();
        $this._saveAccessLogBatch();  

    }, this._autosave_timeout );

    //更新服务进程状态
    setInterval(function () {
        
        $this._updateInstStatusToMysql(); 

    }, this._autofresh_inst_timeout * 1000);
    //定期清理数据库过期数据
    setInterval(function () {
        
        $this._clearLogFromMysql();

    }, this._autodelete_log_timeout  * 1000);



    
    //测试保存日志到数据库
    // setInterval(function () {

    //     for(var i=0;i<100;i++){

    //         let msg = {};
    //         msg.msg="ok";
    //         $this.addLog(msg);

    //     }
        
    //     $this._saveLogBatch(); 

    //     console.log('apm data',$this._apm_access_logs.length,$this._apm_app_logs.length,$this._apm_data.length)
        
    // }, 1 * 1000);


}

module.exports = new APM();
