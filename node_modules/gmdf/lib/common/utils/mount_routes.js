var fs     = require('fs');
var requireDirectory = require('require-directory');
var routes = requireDirectory(module, '../../web/routes');

var PATTERN_LINE_START = "^";
var PATTERN_LINE_END = "$";
var META_CHARACTERS = ['$', '^', '[', ']', '(', ')', '{', '}', '|', '+', '.', '\\'];

var stack = [];

function mount(app,key) {
    var r=arguments[2]||routes;
    var pre=arguments[3]||'';
    for (var k in r){
        var file='/'+pre+''+k+'.js';
        var path='';
        if(typeof r[k]=='object'){
            mount(app,key,r[k],pre+k+'/');
        }else{
            if(k===key){
                path='/'+pre+''+k;
                _use(app,file,'/'+pre,r[k],k);
            }
        }
    }
}

function _use(app,file,path,handler,suffixPath) {
    if(wildcard('*/routes/*',path)){
        var newPath=path+suffixPath;//q.1
        console.log('newPath    ',newPath);
        app.use(newPath,handler);
        _track_routes(file,newPath,handler.stack);
    }
}

function _track_routes(file,path,handle) {
    for(var i in handle){
        // console.log('handle  '+i+" "+JSON.stringify(handle[i]));
        var _route=handle[i].route;
        var params=_route.stack.params;
        for(var j in _route.methods){
            if(_route.path=='/'){
                // _cache_to_stack(file,path,j);
                _cache_to_stack(file,'/',j);
            }else{
                if(path=='/'){
                    // _cache_to_stack(file,_route.path,j);
                    _cache_to_stack(file,'/',j);
                }else{
                    // _cache_to_stack(file,path+_route.path,j);
                    _cache_to_stack(file,_route.path,j);
                }
            }
        }
    }
}

function _cache_to_stack(file,path,method) {
    stack.push({
        file:file,
        method:method,
        path:path
    });
}

function _dump(routes_folder_path) {
    console.log('*******************routes***************');
    for(var k in stack){
        var obj=stack[k];
        console.log(obj.file+"   **   "+obj.method+"   **   "+obj.path);
    }
}
/**
 * 通配符匹配
 */
function wildcard(pattern,word) {
    var result = PATTERN_LINE_START;
    for(var i=0;i<pattern.length;i++){
        var ch = pattern.charAt(i);
        if(metaSearch(ch)){
            result += "\\" + ch;
            continue;
        }else{
            switch (ch) {
                case '*':
                    result += ".*";
                    break;
                case '?':
                    result += ".{0,1}";
                    break;
                default:
                    result += ch;
            }
        }
    }
    result += PATTERN_LINE_END;
    if(word.match(result) == null){
        return false;
    }
    return true;
}

function metaSearch(ch){
    for(var metaCh in META_CHARACTERS){
        if(ch == metaCh ){
            return true;
        }
    }
    return false;
}

function mount_with_folder(app,key,routes_folder_path) {
    stack=[];
    var r=arguments[2]||'./routes';
    var is_debug=arguments[3]|| false;
    routes=requireDirectory(module,r,{extensions:['js']});
    mount(app,key);
    if(is_debug){
        _dump(routes_folder_path);
    }
    return stack;
}

module.exports=mount_with_folder;