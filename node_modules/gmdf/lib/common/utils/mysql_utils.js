var mysql = require('promise-mysql');
var config = require('../../../config');
var Promise = require("bluebird");

module.exports = function mysqlUtils(name) {
    if(!name) {
        name = 'default';
    }
    var db    = {};
    var pool  = mysql.createPool(config['mysql'][name]);

    db.returnMsg4Paging = function(success, code, msg, data, total, page, size, totalTag){
        return {'success':success, 'code':code, 'msg':msg, 'data':data,'count': total, 'page':page, 'limit':size, 'totalTag':totalTag};
    }

    /**
     * 查询数据
     * @param sql
     * @param params
     */
    db.query = function(sql, params){
        return pool.query(sql, params);
    }

    /**
     * 普通分页查询
     * @param sql
     * @param countSql
     * @param params
     * @param page
     * @param size
     * @param cb
     */
    db.pagingQuery = function (sql, countSql, params, page, size){
        var _this = this;

        return new Promise(function (resolve, reject) {
            // 先计算总数
            _this.pagingQueryTotal(countSql, params)
                .then(function(count) {
                    if(count == 0) {
                        resolve(_this.returnMsg4Paging(true, '0000', '分页查询成功', [], 0, 0, size, 1));
                    }
                    else {
                        _this.pagingQueryData(sql, params, page, size)
                            .then(function(rows){
                                resolve(_this.returnMsg4Paging(true, '0000', '分页查询成功', rows, count, page, size, 1));
                            })
                            .catch(function(err){
                                reject(err);
                            });
                    }
                })
                .catch(function(countErr){
                    reject(countErr);
                });
        });
    }

    /**
     * 分页查询数据
     * @param sql
     * @param params
     * @param page
     * @param size
     */
    db.pagingQueryData = function(sql, params, page, size, inc) {
        if (!page || page <= 0) {
            page = 1;
        }
        if(!inc) {
            inc = 0;
        }
        page = parseInt(page);
        size = parseInt(size);
        var start = (page - 1) * size;
        var limitSQL = ' limit ' + start + ', ' + (size + inc) + ' ';
        //console.log('select * from ( ' + sql + ' ) tt' + limitSQL);
        //return this.query('select * from ( ' + sql + ' ) tt' + limitSQL, params);
        // 修复MariaDB中内查询order by被忽略的问题
        //console.log(sql + limitSQL);
        return this.query(sql + limitSQL, params);
    }

    /**
     * 分页查询总数
     * @param countSql
     * @param params
     * @param cb
     */
    db.pagingQueryTotal = function(countSql, params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if(countSql.indexOf(' total ') == -1) {
                reject(new Error(5201 + 'countSql中缺少total别名'));
            }
            else {
                _this.query(countSql, params)
                    .then(function (counts) {
                        resolve(counts[0].total);
                    })
                    .catch(function(countErr){
                        reject(countErr);
                    });
            }
        });
    }

    /**
     * 查询数据
     * @param sql
     * @param params
     */
    db.find = function(sql, params){
        return pool.query(sql, params);
    }

    /**
     * 保存数据
     * @param tablename
     * @param mapEntity
     */
    db.save = function (tablename, mapEntity) {

        // 检查tablename是否存在
        if(tablename) {
            // table
            var table = tablename;

            var columns = [];
            var holders = [];
            var values = [];
            if(mapEntity) {
                for (var column in mapEntity) {
                    columns.push(column);
                    holders.push('?');
                    values.push(mapEntity[column]);
                }
            }
            if(columns.length > 0) {
                // 生成insert
                var sql = 'insert into ' + table + ' (' + columns.join(',') + ') values ( ' + holders.join(',') + ' ) ';

                console.log('mysql insert sql:', sql);
                console.log('mysql insert value:', values);

                return pool.query(sql, values);
            }
            else {
                return new Promise(function (resolve, reject) {
                    reject(new Error(5201 + ':' + tablename + ' column is null'));
                });
            }
        }
        else {
            return new Promise(function (resolve, reject) {
                reject(new Error(5200 + ':' + tablename + ' undefined'));
            });
        }
    }

    /**
     * 更新数据
     * @param tablename
     * @param conditions
     * @param update
     * @returns {null}
     */
    db.update = function (tablename, conditions, update) {
        // 检查tablename是否存在
        if(tablename) {
            // table
            var table = tablename;

            var columns = [];
            var values = [];
            if(update) {
                for (var column in update) {
                    columns.push(column + ' = ? ');
                    values.push(update[column]);
                }
            }
            var where = [];
            if(conditions) {
                for (var column in conditions) {
                    where.push(column + ' = ? ');
                    values.push(conditions[column]);
                }
            }

            if(columns.length > 0) {
                // 生成insert
                var sql = 'update ' + table + ' set ' + columns.join(',');
                // 检查是否带有条件
                if(where.length > 0) {
                    sql += ' where ' + where.join(' and ');
                }
                console.log('mysql update sql:', sql);
                console.log('mysql update value:', values);
                return pool.query(sql, values);
            }
            else {
                return new Promise(function (resolve, reject) {
                    reject(new Error(5201 + ':' + tablename + ' column is null'));
                });
            }
        }
        else {
            return new Promise(function (resolve, reject) {
                reject(new Error(5200 + ':' + tablename + ' undefined'));
            });
        }
    }

    /**
     * 更新数据
     * @param tablename
     * @param conditions
     * @returns {null}
     */
    db.delete = function (tablename, conditions) {
        // 检查tablename是否存在
        if(tablename) {
            // table
            var table = tablename;

            var where = [];
            var values = [];
            if(conditions) {
                for (var column in conditions) {
                    where.push(column + ' = ? ');
                    values.push(conditions[column]);
                }
            }

            if(values.length > 0) {
                // 生成insert
                var sql = 'delete from ' + table ;
                // 检查是否带有条件
                if(where.length > 0) {
                    sql += ' where ' + where.join(' and ');
                }
                console.log('mysql delete sql:', sql);
                console.log('mysql delete value:', values);
                return pool.query(sql, values);
            }
            else {
                return new Promise(function (resolve, reject) {
                    reject(new Error(5201 + ':' + tablename + ' column is null'));
                });
            }
        }
        else {
            return new Promise(function (resolve, reject) {
                reject(new Error(5200 + ':' + tablename + ' undefined'));
            });
        }
    }

    return db;
}