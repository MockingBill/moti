var mysql_utils = require('../../common/utils/mysql_utils')();
let treeLength=0;
/**
 * 分页查询角色列表
 */
exports.pagingRoleList=function(params) {
    var sql='select * from common_role_info';
    var order = ' order by role_order ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_role_info';

    var whereParam = [];
    if(params.role_name) {
        where += ' and role_name like ? or role_code like ?';
        whereParam.push('%' + params.role_name + '%');
        whereParam.push('%' + params.role_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 保存角色
 */
exports.saveRole=function (mapEntity) {
    return mysql_utils.save("common_role_info",mapEntity);
};

/**
 * 通过id修改角色信息
 */
exports.updateRoleById=function(conditions,update){
    return mysql_utils.update("common_role_info",conditions,update);
};

/**
 * 查找所有系统
 */
exports.findAllSysList=function(cb){
    var sql="select id,sys_name from common_system_info";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};

/**
 * 读取菜单及菜单权限表生成树形目录json
 */
exports.generateMenuTree=function(sys_id,sys_name,cb){//先查询system表中是否有目录，没有就生成
    var sql="select id,menu_name,menu_pid from common_menu_info where menu_sysid= ?";
    var where =[];
    where.push(sys_id);
    mysql_utils.find(sql,where).then(function (result) {
        var tree=[{title:sys_name,value:1,data:[]}];
        treeLength=result.length;
        var maxLoop=result.length+2; //无冲突,极端情况，循环一次只能插入一个节点
        console.log('how many menus are there ? ',treeLength);
        while(treeLength>0&&maxLoop>0){
            for(let i in result){
                var treeNode={
                    title:result[i].menu_name,
                    value:result[i].id,
                    data:[]
                };
                generateTree(tree,result[i].menu_pid,treeNode);
            }
            maxLoop=maxLoop-1;
            console.log('生成树以后的长度 ',treeLength);
        }

        if(maxLoop<=0){
            console.log('菜单结构冲突');
        }
        cb(null,JSON.stringify(tree));
    }).catch(function (err) {
        console.log(err);
        cb(null,null);
    })
};


/**
 * 生成选中的树节点
 * @param sys_id
 * @param sys_name
 * @param cb
 */
exports.generateMenuTreeWithCheckStatus=function(sys_id,role_id,sys_name,cb){//先查询system表中是否有目录，没有就生成
    var sql="SELECT distinct id,menu_name,menu_pid, case when id in (SELECT id FROM common_menu_info LEFT JOIN common_role_menu_opt ON common_menu_info.id = common_role_menu_opt.menu_id WHERE menu_sysid = ? and role_id= ? ) then 1 else 0 end as checked FROM common_menu_info LEFT JOIN common_role_menu_opt ON common_menu_info.id = common_role_menu_opt.menu_id WHERE menu_sysid = ? ";
    var where =[];
    where.push(sys_id);
    where.push(role_id);
    where.push(sys_id);
    mysql_utils.find(sql,where).then(function (result) {
        var tree=[{title:sys_name,value:1,data:[]}];
        treeLength=result.length;
        var maxLoop=result.length+2; //无冲突,极端情况，循环一次只能插入一个节点
        console.log('how many menus are there ? ',treeLength);
        while(treeLength>0&&maxLoop>0){
            for(let i in result){
                var treeNode={
                    title:result[i].menu_name,
                    value:result[i].id,
                    checked:result[i].checked,
                    data:[]
                };
                generateTree(tree,result[i].menu_pid,treeNode);
            }
            maxLoop=maxLoop-1;
            console.log('生成树以后的长度 ',treeLength);
        }

        if(maxLoop<=0){
            console.log('菜单结构冲突');
        }
        // console.log('tree structure ',JSON.stringify(tree));
        cb(null,JSON.stringify(tree));
    }).catch(function (err) {
        console.log(err);
        cb(null,null);
    })
};


exports.addOptsToTree=function (tree,cb) {
    var sql='select id,menu_id,opt_name from common_menu_opt_info';
    mysql_utils.find(sql).then(function (result) {
        var menu_tree=tree;
        for(let i in result){
            var optNode={
                title:result[i].opt_name,
                value:'_'+result[i].id,
                checked:true,
                data:[]
            };
            addOptNodeToTree(menu_tree,result[i].menu_id,optNode);
        }

        cb(null,JSON.stringify(menu_tree));
    }).catch(function (err) {
        cb(null,null);
    });
};
/**
 * 删除已有权限
 * @param conditions
 * @returns {null}
 */
exports.deleteExistOpts=function (role_id,sys_id) {
    var sql='DELETE FROM common_role_menu_opt WHERE menu_id in ( SELECT a.id FROM (SELECT id FROM common_menu_info LEFT JOIN common_role_menu_opt ON common_menu_info.id = common_role_menu_opt.menu_id WHERE menu_sysid = ? and role_id= ? ) a) and role_id= ? ';
    var where=[];
    where.push(sys_id);
    where.push(role_id);
    where.push(role_id);
    return mysql_utils.find(sql,where);
}
/**
 * 保存角色拥有的权限
 * @param mapEntity
 * @returns {*}
 */
exports.saveRoleOpts=function (mapEntity) {
    return mysql_utils.save("common_role_menu_opt",mapEntity);
}

/**
 * 切换系统，改变角色表格数据
 * @param sys_id
 * @param params
 * @returns {*}
 */
exports.switchSysData=function (sys_id,params) {
    // console.log('switch',params);
    var sql='select * from common_role_info';
    var order = ' order by role_order,id ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_role_info';

    var whereParam = [];
    if(sys_id) {
        where += ' and sys_id = ? ';
        whereParam.push(sys_id);
    }

    if(params.role_name) {
        where += ' and role_name like ? or role_code like ?';
        whereParam.push('%' + params.role_name + '%');
        whereParam.push('%' + params.role_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 私有函数生成目录树
 * @param tree []
 * @param pid  父节点id
 * @param treeNode  节点结构体 ：[title:'',value:'',data:[]]
 * @returns  tree
 */
function generateTree(tree,pid,treeNode) {
    if(tree.length>0){
        for(var i in tree){
            if(tree[i]['value']==pid){//递归终止条件
                //查看节点是否存在，不存在就插入
                var isNodeExist=false; //假设不存在
                for(var j in tree[i]['data']){
                    if(treeNode['title']==tree[i]['data'][j]['title']&&treeNode['value']==tree[i]['data'][j]['value']){
                        isNodeExist=true;
                    }
                }
                if(isNodeExist){
                    continue;
                }else{
                    if(treeNode['title']=='root'&&treeNode['value']==1){//根目录
                        continue;
                    }else{
                        tree[i]['data'].push(treeNode);
                        treeLength=treeLength-1;
                    }
                }
                return tree;
            }else if(tree[i]['data'].length>0){//没找到 去data里面找找
                generateTree(tree[i]['data'],pid,treeNode);
            }else{
                continue;
            }
        }
    }else{//空的 插入根
        if(treeNode['title']=='root'&&treeNode['value']==1){
            treeLength=treeLength-1;
            return tree.push(treeNode);
        }else{
            return tree;
        }
    }
}

function addOptNodeToTree(tree,menu_id,optNode) {
    if(tree.length>0){
        for(var i in tree){
            if(tree[i]['value']==menu_id){//找到父节点，插入
                console.log('插入菜单权限',optNode);
                tree[i]['data'].push(optNode);
                return tree;
            }else if(tree[i]['data'].length>0){
                // console.log('递归');
                addOptNodeToTree(tree[i]['data'],menu_id,optNode);
            }else{
                // console.log('continue');
                continue;
            }
        }
    }else{
        return tree;
    }
}