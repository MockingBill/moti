var mysql_utils = require('../../common/utils/mysql_utils')();


let treeLength=0;
/**
 * 分页查询菜单列表
 */
exports.pagingMenuList=function(params) {
    console.log(params);
    var sql='select * from common_menu_info';
    var order = ' order by menu_pid,menu_level,menu_order ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_menu_info';

    var whereParam = [];

    if(params.menu_name) {
        where += ' and menu_name like ? or menu_code like ?';
        whereParam.push('%' + params.menu_name + '%');
        whereParam.push('%' + params.menu_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 保存菜单
 */
exports.saveMenu=function (mapEntity) {
    return mysql_utils.save("common_menu_info",mapEntity);
};

/**
 * 通过id修改菜单
 */
exports.updateMenuById=function(conditions,update){
    return mysql_utils.update("common_menu_info",conditions,update);
};

/**
 * 查找所有菜单
 */
exports.findAllMenuList=function(cb){
    var sql="select id,menu_name from common_menu_info";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};

/**
 * 查找所有系统
 */
exports.findAllSysList=function(cb){
    var sql="select id,sys_name from common_system_info";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};

/**
 * 分页查询操作权限列表
 */
exports.pagingOptList=function(menu_id,params) {

    var sql='select * from common_menu_opt_info';
    var order = ' order by opt_order ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_menu_opt_info';

    var whereParam = [];
    if(menu_id) {
        where += ' and menu_id = ? ';
        whereParam.push(menu_id);
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 保存菜单权限
 */
exports.saveMenuOpt=function(mapEntity){
    return mysql_utils.save("common_menu_opt_info",mapEntity);
}

/**
 * 通过id修改菜单权限
 */
exports.updateMenuOptById=function(conditions,update){
    return mysql_utils.update("common_menu_opt_info",conditions,update);
};
/**
 * 读取菜单及菜单权限表生成树形目录json
 */
exports.generateMenuTree=function(sys_id,sys_name,cb){
    var sql="select id,menu_name,menu_nav,menu_pid from common_menu_info where menu_sysid = ? and menu_status = 1";
    var where=[];
    where.push(sys_id);
    mysql_utils.find(sql,where).then(function (result) {
        var tree=[{name:sys_name,nav:sys_name,id:1,sys_id:sys_id,spread:true}];
        treeLength=result.length;
        var maxLoop=result.length+2; //无冲突,极端情况，循环一次只能插入一个节点
        console.log('how many menus are there ? ',treeLength);
        while(treeLength>0&&maxLoop>0){
            for(let i in result){
                var treeNode={
                    name:result[i].menu_name,
                    nav:result[i].menu_nav,
                    id:result[i].id,
                    spread:true
                };
                generateTree(tree,result[i].menu_pid,treeNode);
            }
            maxLoop=maxLoop-1;
            console.log('生成树以后的长度 ',treeLength);
        }

        if(maxLoop<=0){
            console.log('菜单结构冲突');
        }

        cb(null,JSON.stringify(tree));
    }).catch(function (err) {
        console.log(err);
        cb(null,null);
    })
};


exports.isExit=function(url,cb) {
    var sql="select count(1) as num from common_menu_opt_info where opt_url=?";
    var where=[url];
    mysql_utils.query(sql,where).then(function (result) {
        cb(null,result[0]['num']);
    }).catch(function (err) {
        console.log(err);
        cb(null,err);
    })
};

exports.getAllOpts=function (cb) {
    var sql="select opt_url,opt_method from common_menu_opt_info ";
    mysql_utils.query(sql).then(function (result) {
        cb(null,result);
    }).catch(function (err) {
        cb(null,err);
    })
}

exports.searchClickNode=function (map,params) {

    var sql='select * from common_menu_info';
    var order = ' order by menu_pid,menu_level,menu_order ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_menu_info';

    var whereParam = [];
    // if(menu_id) {
    //     where += ' and menu_pid = ?';
    //     whereParam.push(menu_id);
    // }

    if(map.sys_id){
        console.log('系统id存在',map);
        where += ' and menu_sysid = ? and menu_pid = ?';
        whereParam.push(map.sys_id);
        whereParam.push(map.menu_id);
    }else if(map.menu_id){
        console.log('系统id不存在',map);
        where += ' and menu_pid = ?';
        whereParam.push(map.menu_id);
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
}
/**
 * 切换系统，改变表格数据
 * @param sys_id
 * @param params
 * @returns {*}
 */
exports.switchSysData=function (sys_id,params) {
    // console.log('switch',params);
    var sql='select * from common_menu_info';
    var order = ' order by menu_pid,menu_level,menu_order ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_menu_info';

    var whereParam = [];
    if(sys_id) {
        where += ' and menu_sysid = ? ';
        whereParam.push(sys_id);
    }

    if(params.menu_name) {
        where += ' and menu_name like ? or menu_code like ?';
        whereParam.push('%' + params.menu_name + '%');
        whereParam.push('%' + params.menu_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 私有函数生成目录树
 * @param tree []
 * @param pid  父节点id
 * @param treeNode  节点结构体
 * @returns  tree
 */
function generateTree(tree,pid,treeNode) {
    if(tree.length>0){
        for(var i in tree){
            if(tree[i]['id']==pid){ //递归终止条件
                //插入
                if(tree[i].hasOwnProperty("children")){//有子节点,可能重复,重复则跳过，否则就插进去
                    var isNodeExist=false;//假设不存在
                    for(var j in tree[i]['children']){ //遍历子节点
                        if(treeNode.name==tree[i]['children'][j].name&&treeNode.id==tree[i]['children'][j].id){
                            isNodeExist=true;
                        }
                    }
                    if(isNodeExist){
                        continue;
                    }else{
                        if(treeNode.name=='root'&&treeNode.id==1) {//根目录
                            continue;
                        }else{
                            // console.log('直接插入孩子节点   ',treeNode.name);
                            tree[i]["children"].push(treeNode);
                            treeLength=treeLength-1;
                        }

                    }
                }else{//无子节点不会重复，放心插入,如果是根节点就不插入
                    if(treeNode.name=='root'&&treeNode.id==1) {//根目录
                        continue;
                    }else{
                        // console.log('添加孩子并插入节点   ',treeNode.name);
                        tree[i].children=[];
                        tree[i].children.push(treeNode);
                        treeLength=treeLength-1;
                    }
                }
                return tree;
            }else if(tree[i].hasOwnProperty("children")){//菜单有子节点则递归
                generateTree(tree[i].children,pid,treeNode);
            }else{
                continue;
            }
        }
    }else{//直接插入
        if(treeNode.name=='root'&&treeNode.id==1){//根目录
            // console.log('插入根节点');
            treeLength=treeLength-1;
            return tree.push(treeNode);
        }else{
            return tree;
        }
    }
}
