var mysql_utils = require('../../common/utils/mysql_utils')();
let treeLength=0;
/**
 * 分页查询字典列表
 */
exports.pagingDictList=function(params) {
    var sql='select * from common_dict_info';
    var order = ' order by dict_id ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_dict_info';

    var whereParam = [];
    if(params.dict_name) {
        where += ' and dict_name like ? or dict_code like ?';
        whereParam.push('%' + params.dict_name + '%');
        whereParam.push('%' + params.dict_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 保存字典
 */
exports.saveDict=function (mapEntity) {
    return mysql_utils.save("common_dict_info",mapEntity);
};

/**
 * 通过id修改字典信息
 */
exports.updateDictById=function(conditions,update){
    return mysql_utils.update("common_dict_info",conditions,update);
};

/**
 * 分页查询字典属性列表
 */
exports.pagingDictItemList=function(params) {
    var sql='select * from common_dict_item';
    var order = ' order by item_sort ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_dict_item';

    var whereParam = [];
    if(params.item_name) {
        where += ' and item_name like ? or item_code like ?';
        whereParam.push('%' + params.item_name + '%');
        whereParam.push('%' + params.item_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 分页查询字典id的属性列表
 */
exports.pagingDictItemListById=function(dict_id,params) {
    var sql='select * from common_dict_item';
    var order = ' order by item_type,item_parent_id,item_sort ';
    var where = ' where 1 = 1 ';
    var countSql = 'select count(1) as total FROM  common_dict_item';

    var whereParam = [];
    if(dict_id) {
        where += ' and dict_id =  ?';
        whereParam.push(dict_id);
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};

/**
 * 保存字典属性
 */
exports.saveDictItem=function (mapEntity) {
    return mysql_utils.save("common_dict_item",mapEntity);
};

/**
 * 通过id修改字典属性信息
 */
exports.updateDictItemById=function(conditions,update){
    return mysql_utils.update("common_dict_item",conditions,update);
};


/**
 * 查找所有字典id的所有属性
 */
exports.findAllItemList=function(dict_id,cb){
    var sql="select item_id,item_name from common_dict_item where dict_id =?";
    var where=[];
    where.push(dict_id);
    mysql_utils.find(sql,where).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};

/**
 * 读取字典id的属性生成树形目录json
 */
exports.generateMenuTree=function(dict_id,dict_name,cb){
    var sql="select item_id,item_text,item_value,item_parent_id,item_parent_value from common_dict_item where dict_id = ?";
    var where=[];
    where.push(dict_id);
    mysql_utils.find(sql,where).then(function (result) {
        var tree=[{name:dict_name,id:0,dict_id:dict_id,spread:true}];
        treeLength=result.length;
        var maxLoop=result.length+2; //无冲突,极端情况，循环一次只能插入一个节点
        console.log('how many menus are there ? ',treeLength);
        while(treeLength>0&&maxLoop>0){
            for(let i in result){
                var treeNode={
                    name:result[i].item_text,
                    id:result[i].item_id,
                    value:result[i].item_value,
                    pid:result[i].item_parent_id,
                    pvalue:result[i].item_parent_value,
                    spread:true
                };
                generateTree(tree,result[i].item_parent_id,treeNode);
            }
            maxLoop=maxLoop-1;
            console.log('生成树以后的长度 ',treeLength);
        }

        if(maxLoop<=0){
            console.log('菜单结构冲突');
        }

        cb(null,JSON.stringify(tree));
    }).catch(function (err) {
        console.log(err);
        cb(null,null);
    })
};

/**
 * 私有函数生成目录树
 * @param tree []
 * @param pid  父节点id
 * @param treeNode  节点结构体
 * @returns  tree
 */
function generateTree(tree,pid,treeNode) {
    if(tree.length>0){
        for(var i in tree){
            if(tree[i]['id']==pid){ //递归终止条件
                //插入
                if(tree[i].hasOwnProperty("children")){//有子节点,可能重复,重复则跳过，否则就插进去
                    var isNodeExist=false;//假设不存在
                    for(var j in tree[i]['children']){ //遍历子节点
                        if(treeNode.name==tree[i]['children'][j].name&&treeNode.id==tree[i]['children'][j].id){
                            isNodeExist=true;
                        }
                    }
                    if(isNodeExist){
                        continue;
                    }else{
                        if(treeNode.name=='root'&&treeNode.id==0) {//根目录
                            continue;
                        }else{
                            // console.log('直接插入孩子节点   ',treeNode.name);
                            tree[i]["children"].push(treeNode);
                            treeLength=treeLength-1;
                        }

                    }
                }else{//无子节点不会重复，放心插入,如果是根节点就不插入
                    if(treeNode.name=='root'&&treeNode.id==0) {//根目录
                        continue;
                    }else{
                        // console.log('添加孩子并插入节点   ',treeNode.name);
                        tree[i].children=[];
                        tree[i].children.push(treeNode);
                        treeLength=treeLength-1;
                    }
                }
                return tree;
            }else if(tree[i].hasOwnProperty("children")){//菜单有子节点则递归
                generateTree(tree[i].children,pid,treeNode);
            }else{
                continue;
            }
        }
    }else{//直接插入
        if(treeNode.name=='root'&&treeNode.id==0){//根目录
            // console.log('插入根节点');
            treeLength=treeLength-1;
            return tree.push(treeNode);
        }else{
            return tree;
        }
    }
}
