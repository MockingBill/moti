var mysql_utils = require('../../common/utils/mysql_utils')();

var treeLength = 0;
/**
 * 分页查询系统列表
 */
exports.pagingOrgList=function(params) {

    var sql = 'select a.*, b.area_name, b.area_full_name, get_dict_text(\'common_org_type\', a.org_type) as org_type_name from common_org_info a left join common_area_info b on a.org_area_id = b.area_id ';
    var order = ' order by a.org_sort ';
    var where = ' where 1 = 1 and a.org_id != 1';
    var countSql = 'select count(1) as total FROM common_org_info a ';

    var whereParam = [];
    if(params.org_name) {
        where += ' and a.org_name like ? or a.org_code like ? and a.org_id != 1'
        whereParam.push('%' + params.org_name + '%');
        whereParam.push('%' + params.org_name + '%');
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
}

/**
 * 保存系统
 */
exports.saveOrg=function (mapEntity) {
    return mysql_utils.save("common_org_info",mapEntity);
};

/**
 * 通过id修改机构
 */
exports.updateOrgById=function(conditions,update){
    return mysql_utils.update("common_org_info",conditions,update);
};



/**
 * 查询树形数据
 */

exports.OrgTreeList=function(cb) {
    var sql="select org_id,org_code,org_name,org_parent_id from common_org_info";
    mysql_utils.find(sql).then(function (result) {
        var tree=[];
        treeLength=result.length;
        var maxLoop=result.length+2; //无冲突,极端情况，循环一次只能插入一个节点
        console.log('how many org are there ? ',treeLength);
        while(treeLength>0&&maxLoop>0){
            for(let i in result){
                var treeNode={
                    name:result[i].org_name,
                    id:result[i].org_id,
                    spread:true
                };
                // console.log('parent treenode',result[i].menu_pid);
                 //console.log('treenode',treeNode);
                generateTree(tree,result[i].org_parent_id,treeNode);
            }
            maxLoop=maxLoop-1;
            //console.log("循环",maxLoop);
            console.log('生成树以后的长度 ',treeLength);
        }

        if(maxLoop<=0){
            console.log('组织结构冲突');
        }

        //console.log("tree = ",JSON.stringify(tree));

        cb(null,JSON.stringify(tree));
    }).catch(function (err) {
        console.log(err);
        cb(null,null);
    })

}

/**
 * 私有函数生成目录树
 * @param tree []
 * @param pid  父节点id
 * @param treeNode  节点结构体
 * @returns  tree
 */
function generateTree(tree,pid,treeNode) {
    //console.log('treeLength = ',treeLength);
    if(tree.length>0){
        for(var i in tree){
            if(tree[i]['id']==pid){ //递归终止条件
                // console.log('找到了'+tree[i]['name']+'的父亲节点');
                //插入
                if(tree[i].hasOwnProperty("children")){//有子节点,可能重复,重复则跳过，否则就插进去
                    var isNodeExist=false;//假设不存在
                    for(var j in tree[i]['children']){ //遍历子节点
                        if(treeNode.name==tree[i]['children'][j].name&&treeNode.id==tree[i]['children'][j].id){
                            isNodeExist=true;
                        }
                    }
                    if(isNodeExist){
                        continue;
                    }else{
                        if(treeNode.name=='组织架构'&&treeNode.id==1) {//根目录
                            continue;
                        }else{
                            // console.log('直接插入孩子节点   ',treeNode.name);
                            tree[i]["children"].push(treeNode);
                            treeLength=treeLength-1;
                        }

                    }
                }else{//无子节点不会重复，放心插入,如果是根节点就不插入
                    if(treeNode.name=='组织架构'&&treeNode.id==1) {//根目录
                        continue;
                    }else{
                        // console.log('添加孩子并插入节点   ',treeNode.name);
                        tree[i].children=[];
                        tree[i].children.push(treeNode);
                        treeLength=treeLength-1;
                    }
                }
                return tree;
            }else if(tree[i].hasOwnProperty("children")){//菜单有子节点则递归
                // console.log(tree[i]['name']+'居然有孩子，递归进去看看');
                generateTree(tree[i].children,pid,treeNode);
            }else{
                // console.log('第'+i+'次没找到');
                continue;
            }
        }
    }else{//直接插入
        if(treeNode.name=='组织架构'&&treeNode.id==1){//根目录
            //console.log('插入根节点');
            treeLength=treeLength-1;
            return tree.push(treeNode);
        }else{
            return tree;
        }
    }
}



/**
 * 查找所有组织
 */
exports.findOrgList=function(cb){
    var sql="select org_id,org_name from common_org_info";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};


/*
* 查找组织类型
 */
exports.findOrgStyle=function(cb){
    var sql="SELECT a.*,b.item_text,b.item_value FROM common_dict_info a left join common_dict_item b on a.dict_id = b.dict_id where a.dict_code = \"common_org_type\"";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};

/*
* 查找组织类型
 */
exports.findOrgArea=function(cb){
    var sql="select area_id,area_name from common_area_info";
    mysql_utils.find(sql).then(function (result) {
        cb(null,result);
    }).catch(function (error) {
        console.error(error);
        cb(null,null);
    });
};



/*
* 点击节点查询节点及子节点信息
 */
exports.SearchNode=function(org_id,params) {

    var sql = 'select a.*, b.area_name, b.area_full_name, get_dict_text(\'common_org_type\', a.org_type) as org_type_name from common_org_info a left join common_area_info b on a.org_area_id = b.area_id ';
    var order = ' order by a.org_sort ';
    var where = ' where 1 = 1 and a.org_id != 1';
    var countSql = 'select count(1) as total FROM common_org_info a ';

    var whereParam = [];
    if(org_id) {
        where += ' and a.org_id = ? or a.org_parent_id = ?';
        whereParam.push(org_id);
        whereParam.push(org_id);
    }

    return mysql_utils.pagingQuery(sql + where + order, countSql + where, whereParam, params.page, params.limit, 0);
};



/*
* 查询父节点名称
 */
exports.findParentName=function(condition) {
    var sql="select org_name from common_org_info where org_id =" + condition;
    return mysql_utils.find(sql);
};