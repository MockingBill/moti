var express = require('express');
var router = express.Router();

var user_service = require('../services/user_service');
var app_utils = require('../../common/utils/app_utils');
var config = require('../../../config');
// 错误代码列表
var ecl = require('../ecl/user');

var routePrefix='/user';

//正则表达
var reg = /^[1-9]\d*|0$/;


/**
 * 机构列表
 */
router.get('/list.do', async function (req, res, next) {
    try {
        var result = await user_service.pagingUserList(req.query);
        app_utils.respJsonData(res, result);
    } catch (error) {
        app_utils.returnEclMsg(res,false,ecl,10,5100,error);
    }
});

//保存用户及角色
router.post('/save.do',async function (req,res,next) {
    try{
        var mapEntity={};
        var field=req.body;
        console.log(field);
        //app_utils.returnEclMsg(res,false,ecl,11,5100,error);
        //return;
        if(!field.role || !field.user_org || !field.user_status || !field.user_type){
            app_utils.returnEclMsg(res, false, ecl, 11, 5103, null);
            return;
        }

        if(field.user_org == 1){
            app_utils.returnEclMsg(res, false, ecl, 11, 5104, null);
            return;
        }

        field.login_password = app_utils.encryptDataByMD5(field.login_password)
        for(var key in field){
            if(key != "role_id" && key != "role" && key != "catalog" && key != "sync_catalog"){
                mapEntity[key]=field[key];
            }
        }

        // 保存用户信息
        let result = await user_service.saveUser(mapEntity);
        // 保存用户角色
        var role = field.role.split(",");
        for(var i=0; i < role.length; i++) {
            var mapRole = {
                user_id: result.insertId,
                role_id: role[i]
            }
            await user_service.saveRole(mapRole);
        }

        app_utils.returnEclMsg(res,true,ecl,11,2000,null);

        // 设置用户同步
        if(config.project.hasOwnProperty('account')
            && config.project.account.hasOwnProperty('sync')
            && config.project.account.sync.hasOwnProperty('status')
            && config.project.account.sync.status) {
            var sync_catalogs = field.sync_catalog.split(",");

            // 转换sync_catalog定义
            if(config.project.account.sync.hasOwnProperty('catalog') && config.project.account.sync.catalog.length > 0) {
                var catalog_def_array = config.project.account.sync.catalog;
                var catalog_def_map = {};
                for(var i = 0; i < catalog_def_array.length; i++) {
                    catalog_def_map[catalog_def_array[i].value] = catalog_def_array[i];
                }

                for(var i = 0; i < sync_catalogs.length; i++) {
                    var sync_catalog = sync_catalogs[i];
                    if(catalog_def_map.hasOwnProperty(sync_catalog) && catalog_def_map[sync_catalog].on) {
                        var catalog_def = catalog_def_map[sync_catalog];
                        // 获取该类型同步接口定义信息
                        if(catalog_def.hasOwnProperty('api_file') && catalog_def['api_file']
                            && catalog_def.hasOwnProperty('api_method') && catalog_def['api_method']) {
                            var api_file = catalog_def['api_file'];
                            var api_method = catalog_def['api_method'];

                            var file = require("../../../" + api_file);
                            let exec_result = await file[api_method](result.insertId, sync_catalog, {login_account:field.login_account, user_no:field.user_no,user_name:field.user_name, user_phone:field.user_phone, user_email:field.user_email});
                            console.log(sync_catalog, '接口执行结果', exec_result);
                            // 获取调用结果保存同步日志
                            var user_sync_map = {user_id: result.insertId, sync_catalog:sync_catalog, sync_status:exec_result.success ? 1 : 2, sync_time:new Date(), sync_user_id:exec_result.sync_user_id ? exec_result.sync_user_id : '', create_time:new Date(), sync_code : exec_result.code ? exec_result.code : ''};
                            await user_service.saveAccountSync(user_sync_map);
                        }
                    }
                }
            }



        }





    } catch (error){
        console.log(error);
        app_utils.returnEclMsg(res,false,ecl,11,5100,error);
    }
});

//修改用户及角色
router.post('/modify.do',async function (req,res,next) {
    try {
        var id = req.body.user_id;
        console.log('id = ', id);
        if (!reg.test(id)) {
            app_utils.returnEclMsg(res, false, ecl, 12, 5101, null);
            return;
        }
        var mapEntity = {};
        var idmap = {
            user_id: id
        };
        var field = req.body;

        if(field.role == ""){
            app_utils.returnEclMsg(res, false, ecl, 12, 5102, null);
            return;
        }

        if(field.user_org == 1){
            app_utils.returnEclMsg(res, false, ecl, 12, 5105, null);
            return;
        }

        for (var key in field) {
            if (key != "role_id" && key != "login_password" && key != "role" && key != "catalog" && key != "sync_catalog") {
                mapEntity[key] = field[key];
            }
        }
        let result = await user_service.updateUserById(idmap, mapEntity);
        var role = field.role.split(",");
        for(var i=0;i<role.length;i++){
            var mapRole = {
                user_id: id,
                role_id: role[i]
            }
            await user_service.updateRoleById(idmap, mapRole);
        }

        app_utils.returnEclMsg(res,true,ecl,12,2000,null);

        // 设置用户同步
        if(config.project.hasOwnProperty('account')
            && config.project.account.hasOwnProperty('sync')
            && config.project.account.sync.hasOwnProperty('status')
            && config.project.account.sync.status) {
            var sync_catalogs = field.sync_catalog.split(",");

            // 转换sync_catalog定义
            if(config.project.account.sync.hasOwnProperty('catalog') && config.project.account.sync.catalog.length > 0) {
                var catalog_def_array = config.project.account.sync.catalog;
                var catalog_def_map = {};
                for(var i = 0; i < catalog_def_array.length; i++) {
                    catalog_def_map[catalog_def_array[i].value] = catalog_def_array[i];
                }

                for(var i = 0; i < sync_catalogs.length; i++) {
                    var sync_catalog = sync_catalogs[i];
                    if(catalog_def_map.hasOwnProperty(sync_catalog) && catalog_def_map[sync_catalog].on) {
                        var catalog_def = catalog_def_map[sync_catalog];
                        // 获取该类型同步接口定义信息
                        if(catalog_def.hasOwnProperty('api_file') && catalog_def['api_file']
                            && catalog_def.hasOwnProperty('api_method') && catalog_def['api_method']) {
                            var api_file = catalog_def['api_file'];
                            var api_method = catalog_def['api_method'];

                            // 检查账号是否需要同步
                            let check_result = await user_service.checkAccountSync(id, sync_catalog);
                            if(check_result.status != 1) { // 未同步
                                var file = require("../../../" + api_file);
                                let exec_result = await file[api_method](id, sync_catalog, {login_account:field.login_account, user_no:field.user_no,user_name:field.user_name, user_phone:field.user_phone, user_email:field.user_email});
                                console.log(sync_catalog, '接口执行结果', exec_result);
                                // 获取调用结果保存同步日志
                                if(check_result.status == -1) { // 未有同步记录
                                    var user_sync_map = {user_id: id, sync_catalog:sync_catalog, sync_status:exec_result.success ? 1 : 2, sync_time:new Date(), sync_user_id:exec_result.sync_user_id ? exec_result.sync_user_id : '', create_time:new Date(), sync_code : exec_result.code ? exec_result.code : ''};
                                    await user_service.saveAccountSync(user_sync_map);
                                }
                                else { // 更新状态信息
                                    var user_sync_map = {sync_status:exec_result.success ? 1 : 2, sync_time:new Date(), sync_user_id:exec_result.sync_user_id ? exec_result.sync_user_id : '', sync_code : exec_result.code ? exec_result.code : ''};
                                    await user_service.updateAccountSync({user_id: id, sync_catalog:sync_catalog}, user_sync_map);
                                }
                            }
                        }
                    }
                }
            }
        }

    } catch (error){
        console.log(error);
        app_utils.returnEclMsg(res, false, ecl, 12, 5100, error);
    }
});


router.get('/syslist.do', async function (req,res) {
    try{
        user_service.findSysList(function (error,sysList) {
            if(error){
                app_utils.returnEclMsg(res,false,ecl,13,5100,error);
            }else{
                app_utils.returnEclMsg(res,true,ecl,13,2000,sysList);
            }
        });
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,13,5100,error);
    }
});

router.post('/rolelist.do', async function (req,res) {
    try{
        var user_sys = req.body.user_sys;
        var result = await user_service.findRoleList(user_sys);
        app_utils.respJsonData(res,result);
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,14,5100,error);
    }
});


router.post('/reset.do',async function (req,res,next) {
    try{
        var id=req.body.user_id;
        var name = req.body.login_account;
        console.log("name = ",name)
        if(!reg.test(id)){
            app_utils.returnEclMsg(res,false,ecl,15,5100,null);
            return;
        }
        var idmap={
            user_id:id
        };
        var mapEntity={
            login_password:app_utils.encryptDataByMD5(name + "@cmcc")
        };
        console.log("map = ",mapEntity);
        await user_service.ResetUserPwdById(idmap,mapEntity);
        app_utils.returnEclMsg(res,true,ecl,15,2000,null);
    }catch (error){
        app_utils.returnEclMsg(res,false,ecl,15,5102,error);
    }
});


router.get('/stylelist.do', async function (req,res) {
    try{
        user_service.findUserStyleList(function (error,styleList) {
            if(error){
                app_utils.returnEclMsg(res,false,ecl,16,5100,error);
            }else{
                app_utils.returnEclMsg(res,true,ecl,16,2000,styleList);
            }
        });
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,16,5100,error);
    }
});


router.get('/orglist.do', async function (req,res) {
    try{
        user_service.findOrgList(function (error,styleList) {
            if(error){
                app_utils.returnEclMsg(res,false,ecl,17,5100,error);
            }else{
                app_utils.returnEclMsg(res,true,ecl,17,2000,styleList);
            }
        });
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,17,5100,error);
    }
});


router.post('/currentrole.do', async function (req,res) {
    try{
        var user_id = req.body.user_id;
        //console.log(user_id);
        var result = await user_service.findCurrentRole(user_id)
        app_utils.respJsonData(res,result);
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,18,5100,error);
    }
});

router.post('/orginfo.do', async function (req,res,next) {
    try{
        var user_org = req.body.user_org;
        console.log(user_org)
        var result = await user_service.findOrgName(user_org)
        app_utils.respJsonData(res,result);
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,19,5100,error);
    }
});


router.get('/switchsys.do',async function (req,res,next) {
    try {
        var sys_id = req.query.sys_id;
        var result = await user_service.switchSysData(sys_id, req.query);
        app_utils.respJsonData(res, result);
    } catch (error) {
        app_utils.returnEclMsg(res, false, ecl, 20, 5100, error);
    }
});

module.exports = router;