var express = require('express');
var router = express.Router();

var param_service = require('../services/param_service');
var app_utils = require('../../common/utils/app_utils');
// 错误代码列表
var ecl = require('../ecl/param');

//正则表达
var reg = /^[1-9]\d*|0$/;

/**
 * 参数列表
 */
router.get('/list.do', async function (req, res, next) {
    try {
        let result = await param_service.pagingMenuList(req.query);
        app_utils.respJsonData(res, result);
    } catch (error) {
        app_utils.returnEclMsg(res,false,ecl,10,5100,error);
    }
})
/**
 * 保存参数
 */
    .post('/save.do',async function (req,res,next) {
    try{
        console.log('保存的field',req.body);
        var result=await param_service.saveParam(req.body);
        app_utils.returnEclMsg(res,true,ecl,11,2000,null);
    }catch (error){
        app_utils.returnEclMsg(res,false,ecl,11,5100,error);

    }
})
    /**
     * 保存参数类别
     */
    .post('/catalog/save.do',async function (req,res,next) {
        try{
            var mapEntity={};
            var field=req.body;
            for(var key in field){
                mapEntity[key]=field[key];
            }
            // console.log('保存的field',mapEntity);
            var result=await param_service.saveCatalog(mapEntity);
            app_utils.returnEclMsg(res,true,ecl,12,2000,null);
        }catch (error){
            app_utils.returnEclMsg(res,false,ecl,12,5100,error);

        }
    })
    /**
     * 修改参数
     */
    .post('/modify.do',async function (req,res,next) {
    try{
        var param_id=req.body.param_id;
        console.log('body',req.body);
        // console.log('id',param_id);

        if(!reg.test(param_id)){
            app_utils.returnEclMsg(res,false,ecl,13,5100,null);
            return;

        }
        var mapEntity={};
        var idmap={
            param_id:param_id
        };
        var field=req.body;

            for(var key in field){
                if(key=='param_id'){
                    continue;
                }
                mapEntity[key]=field[key];
            }
            // console.log('修改实体',mapEntity);
            await param_service.updateMenuById(idmap,mapEntity);
            app_utils.returnEclMsg(res,true,ecl,13,2000,null);

    }catch (error){
        app_utils.returnEclMsg(res,false,ecl,13,5101,error);
    }
})
    /**
     * 修改类别
     */
    .post('/catalog/modify.do',async function (req,res,next) {
        try{
            let catalog_id=req.body.catalog_id;

            if(!reg.test(catalog_id)){
                app_utils.returnEclMsg(res,false,ecl,14,5100,null);
                return;
            }
            var mapEntity={};
            var idmap={
                catalog_id:catalog_id
            };
            var field=req.body;

                for(var key in field){
                    if(key=='catalog_id'){
                        continue;
                    }
                    mapEntity[key]=field[key];
                }
                // console.log('修改实体',mapEntity);
                await param_service.updateCatalogById(idmap,mapEntity);
                app_utils.returnEclMsg(res,true,ecl,14,2000,null);


        }catch (error){
            app_utils.returnEclMsg(res,false,ecl,14,5103,error);
        }
    })
    /**
     * 获取参数类别列表
     */
    .get('/catalogList.do',async function (req,res) {
    try{
        param_service.findAllMenuList(function (error,menuList) {
            if(error){
                app_utils.returnEclMsg(res,false,ecl,15,5100,error);
            }else{
                app_utils.returnEclMsg(res,true,ecl,15,2000,menuList);
            }
        });
    }catch(error){
        app_utils.returnEclMsg(res,false,ecl,15,5100,error);
    }
})
    /**
     * 获取系统列表
     */
    .get('/sysList.do',async function (req,res,next) {
        try{
            param_service.findAllSysList(function (error,sysList) {
                if(error){
                    app_utils.returnEclMsg(res,false,ecl,16,5100,error);
                }else{
                    app_utils.returnEclMsg(res,true,ecl,16,2000,sysList);
                }
            });
        }catch(error){
            app_utils.returnEclMsg(res,false,ecl,16,5100,error);
        }

})
    /**
     * 生成参数类别树形目录json
     */
    .get('/catalogtree.do',async function (req,res,next) {
        try{
            let sys_id=req.query.sysid;
            param_service.generateMenuTree(sys_id,function (error,result) {
                if(error){
                    app_utils.returnEclMsg(res,false,ecl,17,5100,error);
                }else{
                    app_utils.returnEclMsg(res,true,ecl,17,2000,result);
                }
            })
        }catch(error){
            app_utils.returnEclMsg(res,false,ecl,17,5100,error);
        }
    })
    /**
     * 点击参数类别改变数据表格内容
     */
    .get('/treeNode.do',async function (req,res,next) {
        try{
            var param_catalogid=req.query.param_catalogid;
            var param_sysid=req.query.param_sysid;
            var map={
                param_catalogid:param_catalogid,
                param_sysid:param_sysid
            }
            // console.log('menu',menu_id);
            // console.log('sys',sys_id);
            var result = await param_service.searchClickNode(map,req.query);
            app_utils.respJsonData(res, result);
        }catch (error){
            app_utils.returnEclMsg(res,false,ecl,18,5100,error);
        }
    })
    /**
     * 切换系统,刷新表格
     */
    .get('/switchsys.do',async function (req,res,next) {
        try{
            var param_sysid=req.query.param_sysid;
            var result = await param_service.switchSysData(param_sysid,req.query);
            app_utils.respJsonData(res, result);
        }catch (error){
            app_utils.returnEclMsg(res,false,ecl,19,5100,error);
        }
})
    //获取类别名字
    .post('/parentname.do', async function (req,res,next) {
        try{
            var catalog_id = req.body.param_catalogid;
            console.log(catalog_id)
            var result = await param_service.findParentName(catalog_id)
            app_utils.respJsonData(res,result);
        }catch(error){
            app_utils.returnEclMsg(res,false,ecl,20,5100,error);
        }
    })
;

module.exports = router;
