var express = require('express');
var captchapng = require('captchapng');
var config = require('../../../config');

var app_utils = require('../../common/utils/app_utils');
var tree_utils = require('../../common/utils/tree_utils');
var index_service = require('../services/index_service');
// 错误代码列表
var ecl = require('../ecl/index');

var router = express.Router();


/**
 * 跳转至登陆页面
 * @param res
 * @param message
 */
function toLogin(res, message) {
    res.render('pages/login', {
        layout:false,
        key_1:config.auth.password.key_1,
        key_2:config.auth.password.key_2,
        key_3:app_utils.encryptDataByMD5(config.auth.password.key_3_prefix + app_utils.formatTime('yyyyMMdd')),
        message:message
    });
}

/**
 * 跳转至首页
 * @param res
 * @param sys_theme_layout
 * @param sys_main_url
 */
function toIndex(req, res) {

    var user_info = req.session.current_user;
    var sys_nav = req.session.current_sys_nav;

    var sys_theme_layout = user_info['sys_theme_layout'];
    var sys_main_url = user_info['sys_main_url'];
    if(sys_main_url) {
        if(sys_main_url.indexOf("http://") == 0 || sys_main_url.indexOf("https://") == 0) {
            sys_main_url = sys_main_url;
        }
        else {
            sys_main_url = config.project.base + sys_main_url + '.page';
        }
    }
    else {
        sys_main_url = config.project.base + '/index.page';
    }
    // 加载一级导航菜单

    // 跳转至主页面
    res.render(sys_theme_layout ? sys_theme_layout : 'themes/default/layout', {sys_main_url : sys_main_url, current_user : user_info, sys_nav : sys_nav});
}

/**
 * 解码
 * @param password
 */
function decrypt(password) {
    return app_utils.decryptData(password,
        config.auth.password.key_1,
        config.auth.password.key_2,
        app_utils.encryptDataByMD5(config.auth.password.key_3_prefix + app_utils.formatTime('yyyyMMdd')));
}

/* GET home page. */
router.get('/', function (req, res, next) {

    toIndex(req, res);
});

router.get('/menus.do', async function (req, res, next) {
    // 页面路径
    var nav_id = req.query.nav_id;
    var user_info = req.session.current_user;
    var crurent_sys_id = user_info['user_sys'];
    var current_user_id = user_info.user_id;

    try {
        let result = await index_service.querySysMenu(crurent_sys_id, nav_id, current_user_id);
        //console.log(crurent_sys_id, nav_id,result);
        if (result.length == 0) {
            app_utils.respJsonData(res, []);
        }
        else {

            // 递归生成树
            var tree = tree_utils.transData(result, 'id', 'pid', 'children');
            app_utils.respJsonData(res, tree);
        }
    } catch (error) {
        console.log('加载菜单出现异常：', error);
        app_utils.respJsonData(res, []);
    }
});

router.get('/param_:code.page', async function (req, res, next) {
    var code = req.params.code;
    if(!code) {
        res.render('pages/param_info', {
            layout : 'themes/default/layout_child',
            success:false,
            msg:'系统参数类别不能为空'
        });
    }
    else {
        var current_user = req.session.current_user;
        // 当前用户所在系统
        var current_sys = current_user['user_sys'];

        let param_catalog = await index_service.querySysParamCatalog(current_sys, code);
        if(param_catalog.length > 0) {
            var catalog = param_catalog[0];
            let param_list = await index_service.querySysParam(catalog['catalog_id']);
            // 加载页面设置布局
            res.render('pages/param_info', {
                layout : 'themes/default/layout_child',
                success:true,
                msg:'获取系统参数信息成功',
                param_catalog : catalog,
                param_list : param_list
            });
        }
        else {
            res.render('pages/param_info', {
                layout : 'themes/default/layout_child',
                success:false,
                msg:'系统参数类别不存在'
            });
        }
    }
});

router.get('/change_pwd.page', function (req, res, next) {
    // 加载页面设置布局
    res.render('pages/change_pwd', {
        layout : 'themes/default/layout_child',
        key_1:config.auth.password.key_1,
        key_2:config.auth.password.key_2,
        key_3:app_utils.encryptDataByMD5(config.auth.password.key_3_prefix + app_utils.formatTime('yyyyMMdd'))});
});

router.get('/user_info.page', async function (req, res, next) {
    var current_user = req.session.current_user;

    // 查询当前用户信息
    var user_id = current_user['user_id'];
    var value = {};
    try {
        let result = await index_service.queryUserById(user_id);
        if(result.length > 0) {
            value = result[0];
        }
    }catch (error) {
        console.log('查询用户详情出现异常：', error);
    }
    res.render('pages/user_info', {
        layout : 'themes/default/layout_child',
        current_user : value});

});

router.get('/:name.page', function (req, res, next) {
    // 页面路径
    var name = req.params.name;

    // 加载页面设置布局
    res.render('pages/' + name, {layout : 'themes/default/layout_child'});
});

router
    // 跳转转至登陆页面
    .get('/login', function (req, res, next) {
        if(config.auth.auth_type == 'cas') {
            // 跳转至主页
            res.redirect(config.auth.cas_client_service_url + config.project.base + "/");
        }
        else {
            toLogin(res, '');
        }
    })
    // 跳转至登陆页面
    .get('/login.do', function (req, res, next) {

        toLogin(res, '');
    })
    // 登陆
    .post('/login.do', async function (req, res, next) {

        // 获取登录信息
        var account = req.body.account;
        var password = req.body.password;
        var captcha = req.body.captcha;

        // 验证
        if(!account) {
            //app_utils.respMsg(res, false, 5100, ecl('10', '5100'), null, null);
            app_utils.returnEclMsg(res, false, ecl, 10, 5100, null);
        }
        else if(!password) {
            //app_utils.respMsg(res, false, 5101, ecl('10', '5101'), null, null);
            app_utils.returnEclMsg(res, false,  ecl, 10, 5101, null);
        }
        else if(config.project.captcha_login_enable && !captcha) {
            //app_utils.respMsg(res, false, 5102, ecl('10', '5102'), null, null);
            app_utils.returnEclMsg(res, false,  ecl, 10, 5102, null);
        }
        else {
            // 检查验证码是否正确
            if(config.project.captcha_login_enable && req.session[config.project.captcha_session_key] != captcha) {
                //app_utils.respMsg(res, false, 5107, ecl('10', '5107'), null, null);
                app_utils.returnEclMsg(res, false, ecl, 10, 5107, null);
            }
            else {
                // 清除验证码
                if(config.project.captcha_login_enable) {
                    req.session[config.project.captcha_session_key] = '';
                }
                try {
                    let result = await index_service.queryUserByAccountOrPhone(account);
                    if(result.length == 1) {
                        var user_info = result[0];

                        // 解密密码
                        var decrypt_password = app_utils.decryptData(password,
                            config.auth.password.key_1,
                            config.auth.password.key_2,
                            app_utils.encryptDataByMD5(config.auth.password.key_3_prefix + app_utils.formatTime('yyyyMMdd')));
                        console.log('decrypt pwd:' + decrypt_password);

                        // 检查用户密码是否正确
                        if(user_info['login_password'] == decrypt_password) {
                            // 检查账号是否被冻结
                            if(user_info['user_status'] == 1) {
                                // 加载用户其他信息及权限信息
                                var current_sys = user_info['user_sys'];
                                // 保存当前用户
                                req.session.current_user = user_info;

                                var current_user_id = user_info.user_id;

                                // 加载一级导航
                                let sys_nav = await index_service.querySysNav(current_sys, current_user_id);
                                req.session.current_sys_nav = sys_nav;

                                // 保存当前用户拥有的权限
                                let user_auths = await index_service.getUserRoleMenus(current_user_id);
                                req.session.current_user_auths = app_utils.array2map(user_auths, 'menu_url', 'id');

                                // 保存当前角色所拥有的菜单权限
                               // req.session.current_user_role_menus = has_role_menus;
                                // 保存当前角色所拥有的操作权限
                                //req.session.current_user_role_menus_opts = has_role_menus_opts;
                                // 保存当前显示的角色
                                //req.session.current_user_role = role;
                                // 保存系统菜单
                                //req.session.current_sys_menus = sysMenuResult.data;

                                req.session.save(function (err) {

                                    // 跳转至主页面
                                    // res.render(sys_theme_layout ? sys_theme_layout : 'themes/default/layout', {sys_main_url:sys_main_url});
                                    //res.redirect(config.project.base);
                                    //app_utils.respMsg(res, true, 2000, ecl('10', '2000'), {url:config.project.base}, null);
                                    app_utils.returnEclMsg(res, true,  ecl, 10, 2000, {url:config.project.base+'/'});
                                });
                            }
                            else {
                                //app_utils.respMsg(res, false, 5108, ecl('10', '5108'), null, null);
                                app_utils.returnEclMsg(res, false,  ecl, 10, 5108, null);
                            }
                        }
                        else {
                            //app_utils.respMsg(res, false, 5104, ecl('10', '5104'), null, null);
                            app_utils.returnEclMsg(res, false, ecl, 10, 5104, null);
                        }
                    }
                    else if(result.length > 1){
                        //app_utils.respMsg(res, false, 5105, ecl('10', '5105'), null, null);
                        app_utils.returnEclMsg(res, false, ecl, 10, 5105, null);
                    }
                    else {
                        //app_utils.respMsg(res, false, 5106, ecl('10', '5106'), null, null);
                        app_utils.returnEclMsg(res, false, ecl, 10, 5106, null);
                    }
                } catch (error) {console.log(error);
                    //app_utils.respMsg(res, false, 5103, ecl('10', '5103'), null, error);
                    app_utils.returnEclMsg(res, false, ecl, 10, 5103, null);
                }
            }
        }
    })
    // 注销登陆
    .get('/logout.do', function(req, res){
        // 清空session
        req.session.destroy(function(error, result){
            console.log(error, result);
            // 检查登陆方式
            if(config.auth.auth_type == 'cas') {
                // 跳转至cas登出
                res.redirect(config.auth.cas_server_logout_url+"?service="+config.auth.cas_client_service_url + config.project.base + "/");
            }
            else {
                // 跳转至登陆页面
                res.redirect(config.project.base+'/login');
            }
        });
    })
    // 修改密码
    .post('/changepwd.do', async function(req, res){
        // 获取登录信息
        var old_pwd_ = req.body.old_pwd;
        var new_pwd_ = req.body.new_pwd;
        var confirm_pwd_ = req.body.confirm_pwd;

        // 解码
        var old_pwd = decrypt(old_pwd_);
        var new_pwd = decrypt(new_pwd_);
        var confirm_pwd = decrypt(confirm_pwd_);

        console.log(old_pwd, new_pwd, confirm_pwd);
        // 验证
        if(!old_pwd) {
            app_utils.returnEclMsg(res, false,  ecl, 11, 5100, null);
        }
        else if(!new_pwd) {
            app_utils.returnEclMsg(res, false,  ecl, 11, 5101, null);
        }
        else if(!confirm_pwd) {
            app_utils.returnEclMsg(res, false,  ecl, 11, 5102, null);
        }
        else if(new_pwd != confirm_pwd) {
            app_utils.returnEclMsg(res, false, ecl, 11, 5103, null);
        }
        else if(!/^[0-9a-zA-Z!@#$%^&*]{8,18}$/.test(new_pwd)) {
            app_utils.returnEclMsg(res, false, ecl, 11, 5104, null);
        }
        else {
            try {
                // 获取当前登录用户信息
                var current_user = req.session.current_user;
                var current_user_id = current_user.user_id;

                // md5加密原始密码

                var md5_old_pwd = app_utils.encryptDataByMD5(old_pwd);


                let user_info = await index_service.queryUserById(current_user_id);
                if(user_info.length > 0 && user_info[0]['login_password'] != md5_old_pwd) {
                    app_utils.returnEclMsg(res, false, ecl, 11, 5105, null);
                }
                else {
                    var md5_new_pwd = app_utils.encryptDataByMD5(new_pwd);
                    let updateResult = await index_service.updateUserPwd(current_user_id, md5_new_pwd);
                    //console.log(user_info);
                    if(updateResult['affectedRows'] > 0) {
                        app_utils.returnEclMsg(res, true,  ecl, 11, 2000, null);
                    }
                    else {
                        app_utils.returnEclMsg(res, false, ecl, 11, 5106, null);
                    }
                }
            } catch (error) {console.log(error);
                //app_utils.respMsg(res, false, 5103, ecl('10', '5103'), null, error);
                app_utils.returnEclMsg(res, false, ecl, 10, 5107, null);
            }
        }


    })
    // 生成验证码
    .get('/captcha.do', function(req, res){

        // 随机验证码位数4~6
        var digits = Math.floor(4 + Math.random() * 3);

        var pow = Math.pow(10, digits - 1);
        var code = parseInt(Math.random() * 9 * pow + pow);

        //console.log('captcha:' + code);
        // 保存验证码至session
        req.session[config.project.captcha_session_key] = code;

        req.session.save(function (err) {
            if(err)
                console.log('session error:' + err);

            var p = new captchapng(86, 34, code); // width,height,numeric captcha
            p.color(Math.floor(160 + Math.random() * 40), Math.floor(160 + Math.random() * 40), Math.floor(160 + Math.random() * 40), 140);  // First color: background (red, green, blue, alpha)
            p.color(Math.floor(Math.random() * 20 + 110), Math.floor(Math.random() * 20 + 110), Math.floor(Math.random() * 20 + 110), 255); // Second color: paint (red, green, blue, alpha)

            var img = p.getBase64();
            var imgbase64 = new Buffer(img,'base64');
            res.writeHead(200, {
                'Content-Type': 'image/png'
            });
            res.end(imgbase64);
        });
});

router.get('/common/syslist.do', async function (req, res, next) {
    // 系统状态
    var status = req.params.status;
    try {
        let syslist = await index_service.querySysList(status);
        app_utils.returnEclMsg(res,true,ecl,12,2000,syslist);
    }
    catch(error) {
        app_utils.returnEclMsg(res, false, ecl, 12, 5100, error);
    }

});

router.post('/common/saveSysParams.do', async function (req, res, next) {
    try {
        let param_ids = req.body.param_ids instanceof Array ? req.body.param_ids : [req.body.param_ids];
        let param_values = req.body.param_values instanceof Array ? req.body.param_values : [req.body.param_values];
        var count = 0;
        for(var i = 0; i < param_ids.length; i++) {
            var param_id = param_ids[i];
            var param_value = param_values[i];

            let result = await index_service.updateSysParamValue(param_id, param_value);
            //console.log(result);
            if(result.affectedRows > 0) {
                count++;
            }
        }
        if(count == param_ids.length) {
            app_utils.returnEclMsg(res,true,ecl,13,2000,null);
        }
        else {
            app_utils.returnEclMsg(res, false, ecl, 13, 5101, null);
        }
    }
    catch(error) {//console.log(error);
        app_utils.returnEclMsg(res, false, ecl, 13, 5100, error);
    }
});

module.exports = router;
